{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/__tests__/useStarknet.mock.test.ts","mappings":";;AAAA,8DAA+D;AAC/D,sDAAmD;AAEnD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,yBAAW,GAAE,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9C,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,wBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,yBAAW,GAAE,CAAC,CAAC;QACnD,MAAM,IAAA,iBAAG,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,MAAM,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,MAAM,IAAA,iBAAG,EAAC,KAAK,IAAI,EAAE;YACnB,MAAM,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/__tests__/useStarknet.mock.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react-hooks';\nimport { useStarknet } from '../hooks/useStarknet';\n\ndescribe('useStarknet (mock)', () => {\n  it('returns mock account and contract in dev mode', () => {\n    const { result } = renderHook(() => useStarknet());\n    expect(result.current.account).toBeDefined();\n    expect(result.current.account).toMatch(/^0x[a-fA-F0-9]{8,}/);\n    expect(result.current.contract).toBeDefined();\n    expect(typeof result.current.connectWallet).toBe('function');\n    expect(typeof result.current.disconnectWallet).toBe('function');\n  });\n\n  it('simulates connect/disconnect events', async () => {\n    const { result } = renderHook(() => useStarknet());\n    await act(async () => {\n      await result.current.connectWallet();\n    });\n    expect(result.current.account).toBeDefined();\n    await act(async () => {\n      await result.current.disconnectWallet();\n    });\n    expect(result.current.account).toBeNull();\n  });\n});\n"],"version":3}