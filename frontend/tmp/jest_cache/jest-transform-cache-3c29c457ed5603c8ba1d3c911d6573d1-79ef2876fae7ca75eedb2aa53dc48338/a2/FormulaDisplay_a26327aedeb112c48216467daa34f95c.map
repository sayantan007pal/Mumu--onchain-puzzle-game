{"version":3,"names":["_react","_interopRequireDefault","require","_GameTypes","e","__esModule","FormulaDisplay","_ref","formula","createElement","className","getMatterSymbol","type","MatterType","EARTH","WATER","FIRE","AIR","VOID","renderCondition","condition","undefined","operator","left","quantity","right","result","_default","exports"],"sources":["FormulaDisplay.tsx"],"sourcesContent":["import React from 'react';\nimport { Formula, MatterType } from '../types/GameTypes'; // Ensure this path is correct\nimport '../styles/FormulaDisplay.css';\n\ninterface FormulaDisplayProps {\n  formula: Formula | string;\n}\n\nconst FormulaDisplay: React.FC<FormulaDisplayProps> = ({ formula }) => {\n  // DEV/TEST: If formula is a string (mock/test mode), just render it as text\n  if (typeof formula === 'string') {\n    return <div className=\"formula-display formula-string\">{formula}</div>;\n  }\n\n  const getMatterSymbol = (type: MatterType): string => {\n    switch (type) {\n      case MatterType.EARTH:\n        return 'ðŸŸ¤';\n      case MatterType.WATER:\n        return 'ðŸŸ¦';\n      case MatterType.FIRE:\n        return 'ðŸŸ¥';\n      case MatterType.AIR:\n        return 'â¬œ';\n      case MatterType.VOID:\n        return 'â¬›';\n      default:\n        return '?';\n    }\n  };\n\n  const renderCondition = (condition: any) => {\n    if (condition.type !== undefined) {\n      return <span className=\"matter-symbol\">{getMatterSymbol(condition.type)}</span>;\n    } else if (condition.operator) {\n      return (\n        <div className=\"formula-group\">\n          {renderCondition(condition.left)}\n          <span className=\"operator\">{condition.operator}</span>\n          {condition.quantity && (\n            <span className=\"quantity\">{condition.quantity}</span>\n          )}\n          {condition.right && renderCondition(condition.right)}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"formula-display\">\n      <div className=\"formula-condition\">\n        {renderCondition(formula.condition)}\n      </div>\n      <div className=\"formula-arrow\">â†’</div>\n      <div className=\"formula-result\">\n        <span className=\"matter-symbol\">{getMatterSymbol(formula.result as MatterType)}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default FormulaDisplay;"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACAA,OAAA;AAAsC,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AADoB;;AAO1D,IAAME,cAA6C,GAAG,SAAhDA,cAA6CA,CAAAC,IAAA,EAAoB;EAAA,IAAdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;EAC9D;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,oBAAOR,MAAA,YAAAS,aAAA;MAAKC,SAAS,EAAC;IAAgC,GAAEF,OAAa,CAAC;EACxE;EAEA,IAAMG,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,IAAgB,EAAa;IACpD,QAAQA,IAAI;MACV,KAAKC,qBAAU,CAACC,KAAK;QACnB,OAAO,IAAI;MACb,KAAKD,qBAAU,CAACE,KAAK;QACnB,OAAO,IAAI;MACb,KAAKF,qBAAU,CAACG,IAAI;QAClB,OAAO,IAAI;MACb,KAAKH,qBAAU,CAACI,GAAG;QACjB,OAAO,GAAG;MACZ,KAAKJ,qBAAU,CAACK,IAAI;QAClB,OAAO,GAAG;MACZ;QACE,OAAO,GAAG;IACd;EACF,CAAC;EAED,IAAMC,gBAAe,GAAG,SAAlBA,eAAeA,CAAIC,SAAc,EAAK;IAC1C,IAAIA,SAAS,CAACR,IAAI,KAAKS,SAAS,EAAE;MAChC,oBAAOrB,MAAA,YAAAS,aAAA;QAAMC,SAAS,EAAC;MAAe,GAAEC,eAAe,CAACS,SAAS,CAACR,IAAI,CAAQ,CAAC;IACjF,CAAC,MAAM,IAAIQ,SAAS,CAACE,QAAQ,EAAE;MAC7B,oBACEtB,MAAA,YAAAS,aAAA;QAAKC,SAAS,EAAC;MAAe,GAC3BS,gBAAe,CAACC,SAAS,CAACG,IAAI,CAAC,eAChCvB,MAAA,YAAAS,aAAA;QAAMC,SAAS,EAAC;MAAU,GAAEU,SAAS,CAACE,QAAe,CAAC,EACrDF,SAAS,CAACI,QAAQ,iBACjBxB,MAAA,YAAAS,aAAA;QAAMC,SAAS,EAAC;MAAU,GAAEU,SAAS,CAACI,QAAe,CACtD,EACAJ,SAAS,CAACK,KAAK,IAAIN,gBAAe,CAACC,SAAS,CAACK,KAAK,CAChD,CAAC;IAEV;IACA,OAAO,IAAI;EACb,CAAC;EAED,oBACEzB,MAAA,YAAAS,aAAA;IAAKC,SAAS,EAAC;EAAiB,gBAC9BV,MAAA,YAAAS,aAAA;IAAKC,SAAS,EAAC;EAAmB,GAC/BS,gBAAe,CAACX,OAAO,CAACY,SAAS,CAC/B,CAAC,eACNpB,MAAA,YAAAS,aAAA;IAAKC,SAAS,EAAC;EAAe,GAAC,QAAM,CAAC,eACtCV,MAAA,YAAAS,aAAA;IAAKC,SAAS,EAAC;EAAgB,gBAC7BV,MAAA,YAAAS,aAAA;IAAMC,SAAS,EAAC;EAAe,GAAEC,eAAe,CAACH,OAAO,CAACkB,MAAoB,CAAQ,CAClF,CACF,CAAC;AAEV,CAAC;AAAC,IAAAC,QAAA,GAAAC,OAAA,cAEatB,cAAc","ignoreList":[]}