ab39e680f97f9f0a74229db482b039a0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGameState = void 0;
// src/hooks/useGameState.ts
const react_1 = require("react");
const GameTypes_1 = require("../types/GameTypes");
const formulaUtils_1 = require("../utils/formulaUtils");
const gridUtils_1 = require("../utils/gridUtils");
const useGameState = (initialGrid, targetGrid) => {
    const [gameState, setGameState] = (0, react_1.useState)({
        grid: initialGrid.map(row => [...row]), // Deep copy
        history: [initialGrid.map(row => [...row])], // Save initial state in history
        moves: 0
    });
    const setGrid = (0, react_1.useCallback)((newGrid) => {
        setGameState(prevState => ({
            ...prevState,
            grid: newGrid,
            history: [...prevState.history, newGrid],
            moves: prevState.moves + 1
        }));
    }, []);
    const applyMatterTransformation = (0, react_1.useCallback)((position, formula) => {
        const { row, col } = position;
        const { grid } = gameState;
        // If the cell is empty (VOID), do nothing
        if (grid[row][col] === GameTypes_1.MatterType.VOID)
            return;
        const newGrid = grid.map(row => [...row]); // Deep copy current grid
        // Get adjacent cells for formula evaluation
        const adjacentCells = (0, gridUtils_1.getAdjacentCells)(grid, row, col);
        if (formula) {
            // Apply specific formula if selected
            const shouldTransform = (0, formulaUtils_1.evaluateFormula)(formula.condition, grid[row][col], adjacentCells);
            if (shouldTransform) {
                // For simplicity, assuming result is always a MatterType
                newGrid[row][col] = formula.result;
                setGrid(newGrid);
            }
        }
        else {
            // Auto-apply first applicable formula based on game rules
            // Here we could implement game-specific rules from the project
            const waterToEarth = grid[row][col] === GameTypes_1.MatterType.WATER &&
                adjacentCells.filter(cell => cell === GameTypes_1.MatterType.FIRE).length >= 2;
            const earthToAir = grid[row][col] === GameTypes_1.MatterType.EARTH &&
                adjacentCells.includes(GameTypes_1.MatterType.WATER) &&
                adjacentCells.includes(GameTypes_1.MatterType.AETHER);
            const fireToWater = grid[row][col] === GameTypes_1.MatterType.FIRE &&
                adjacentCells.every(cell => cell === GameTypes_1.MatterType.VOID);
            const airToAether = grid[row][col] === GameTypes_1.MatterType.AIR &&
                adjacentCells.filter(cell => cell !== GameTypes_1.MatterType.VOID).length >= 3;
            const aetherToFire = grid[row][col] === GameTypes_1.MatterType.AETHER &&
                adjacentCells.includes(GameTypes_1.MatterType.AIR);
            if (waterToEarth) {
                newGrid[row][col] = GameTypes_1.MatterType.EARTH;
                setGrid(newGrid);
            }
            else if (earthToAir) {
                newGrid[row][col] = GameTypes_1.MatterType.AIR;
                setGrid(newGrid);
            }
            else if (fireToWater) {
                newGrid[row][col] = GameTypes_1.MatterType.WATER;
                setGrid(newGrid);
            }
            else if (airToAether) {
                newGrid[row][col] = GameTypes_1.MatterType.AETHER;
                setGrid(newGrid);
            }
            else if (aetherToFire) {
                newGrid[row][col] = GameTypes_1.MatterType.FIRE;
                setGrid(newGrid);
            }
        }
    }, [gameState, setGrid]);
    const undoLastMove = (0, react_1.useCallback)(() => {
        setGameState(prevState => {
            if (prevState.history.length <= 1)
                return prevState;
            const newHistory = [...prevState.history];
            newHistory.pop(); // Remove current state
            return {
                grid: newHistory[newHistory.length - 1].map(row => [...row]), // Deep copy last state
                history: newHistory,
                moves: prevState.moves - 1
            };
        });
    }, []);
    const resetGrid = (0, react_1.useCallback)(() => {
        setGameState({
            grid: initialGrid.map(row => [...row]), // Deep copy initial grid
            history: [initialGrid.map(row => [...row])], // Reset history with only initial state
            moves: 0
        });
    }, [initialGrid]);
    // Check if puzzle is solved by comparing with target grid
    const isSolved = (0, react_1.useCallback)(() => {
        if (!targetGrid)
            return false;
        const { grid } = gameState;
        // Compare current grid with target grid
        for (let i = 0; i < grid.length; i++) {
            for (let j = 0; j < grid[i].length; j++) {
                if (grid[i][j] !== targetGrid[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }, [gameState, targetGrid]);
    return {
        grid: gameState.grid,
        moves: gameState.moves,
        setGrid,
        applyMatterTransformation,
        undoLastMove,
        resetGrid,
        isSolved: isSolved()
    };
};
exports.useGameState = useGameState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,