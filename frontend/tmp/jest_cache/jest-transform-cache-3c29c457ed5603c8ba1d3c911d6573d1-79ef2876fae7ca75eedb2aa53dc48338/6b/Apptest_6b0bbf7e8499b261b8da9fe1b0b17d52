9ab0a5755cb7a39398ee1190060709d5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@testing-library/react");
const App_1 = require("./App");
// Mock fetch to always return a valid puzzle
beforeEach(() => {
    global.fetch = jest.fn(() => Promise.resolve(new Response(JSON.stringify({
        initial_grid: [[0, 1], [1, 0]],
        target_grid: [[1, 1], [1, 1]],
        formulas: ['A+B'],
    }), { status: 200, headers: { 'Content-Type': 'application/json' } })));
});
afterEach(() => {
    jest.resetAllMocks();
});
describe('App', () => {
    it('renders the main logo and footer', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
        // There may be multiple elements with "MuMu Game" (logo and footer)
        const titles = react_2.screen.getAllByText(/MuMu Game/i);
        expect(titles.length).toBeGreaterThan(0);
        expect(react_2.screen.getByText(/Built on Starknet/i)).toBeInTheDocument();
    });
    it('shows the GameBoard after loading puzzle', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
        // Wait for loading to disappear
        await (0, react_2.waitForElementToBeRemoved)(() => react_2.screen.getByText(/loading puzzle/i));
        // Now check for the formula
        expect(react_2.screen.getByText((content) => content.includes('A+B'))).toBeInTheDocument();
    });
    it('falls back to mock puzzle and shows GameBoard if backend fails', async () => {
        global.fetch.mockImplementationOnce(() => Promise.reject('fail'));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
        // Wait for the GameBoard to appear (formula "A+B" from mock)
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText((content) => content.includes('A+B'))).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3NheWFudGFucGFsMTAwL0Rlc2t0b3AvTXVtdS0tb25jaGFpbi1wdXp6bGUtZ2FtZS9mcm9udGVuZC9zcmMvQXBwLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUEwQjtBQUMxQixrREFBNEY7QUFDNUYsK0JBQXdCO0FBRXhCLDZDQUE2QztBQUM3QyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUMxQixPQUFPLENBQUMsT0FBTyxDQUNiLElBQUksUUFBUSxDQUNWLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDYixZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QixXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUM7S0FDbEIsQ0FBQyxFQUNGLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxDQUNqRSxDQUNGLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO0lBQ25CLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBQSxjQUFNLEVBQUMsdUJBQUMsYUFBRyxLQUFHLENBQUMsQ0FBQztRQUNoQixvRUFBb0U7UUFDcEUsTUFBTSxNQUFNLEdBQUcsY0FBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNyRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN4RCxJQUFBLGNBQU0sRUFBQyx1QkFBQyxhQUFHLEtBQUcsQ0FBQyxDQUFDO1FBQ2hCLGdDQUFnQztRQUNoQyxNQUFNLElBQUEsaUNBQXlCLEVBQUMsR0FBRyxFQUFFLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDM0UsNEJBQTRCO1FBQzVCLE1BQU0sQ0FBQyxjQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3JGLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdFQUFnRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzdFLE1BQU0sQ0FBQyxLQUFtQixDQUFDLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqRixJQUFBLGNBQU0sRUFBQyx1QkFBQyxhQUFHLEtBQUcsQ0FBQyxDQUFDO1FBQ2hCLDZEQUE2RDtRQUM3RCxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtZQUNqQixNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3NheWFudGFucGFsMTAwL0Rlc2t0b3AvTXVtdS0tb25jaGFpbi1wdXp6bGUtZ2FtZS9mcm9udGVuZC9zcmMvQXBwLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgd2FpdEZvciwgd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbi8vIE1vY2sgZmV0Y2ggdG8gYWx3YXlzIHJldHVybiBhIHZhbGlkIHB1enpsZVxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT5cbiAgICBQcm9taXNlLnJlc29sdmUoXG4gICAgICBuZXcgUmVzcG9uc2UoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBpbml0aWFsX2dyaWQ6IFtbMCwgMV0sIFsxLCAwXV0sXG4gICAgICAgICAgdGFyZ2V0X2dyaWQ6IFtbMSwgMV0sIFsxLCAxXV0sXG4gICAgICAgICAgZm9ybXVsYXM6IFsnQStCJ10sXG4gICAgICAgIH0pLFxuICAgICAgICB7IHN0YXR1czogMjAwLCBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSB9XG4gICAgICApXG4gICAgKVxuICApO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGplc3QucmVzZXRBbGxNb2NrcygpO1xufSk7XG5cbmRlc2NyaWJlKCdBcHAnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIHRoZSBtYWluIGxvZ28gYW5kIGZvb3RlcicsICgpID0+IHtcbiAgICByZW5kZXIoPEFwcCAvPik7XG4gICAgLy8gVGhlcmUgbWF5IGJlIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggXCJNdU11IEdhbWVcIiAobG9nbyBhbmQgZm9vdGVyKVxuICAgIGNvbnN0IHRpdGxlcyA9IHNjcmVlbi5nZXRBbGxCeVRleHQoL011TXUgR2FtZS9pKTtcbiAgICBleHBlY3QodGl0bGVzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9CdWlsdCBvbiBTdGFya25ldC9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3dzIHRoZSBHYW1lQm9hcmQgYWZ0ZXIgbG9hZGluZyBwdXp6bGUnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxBcHAgLz4pO1xuICAgIC8vIFdhaXQgZm9yIGxvYWRpbmcgdG8gZGlzYXBwZWFyXG4gICAgYXdhaXQgd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCgoKSA9PiBzY3JlZW4uZ2V0QnlUZXh0KC9sb2FkaW5nIHB1enpsZS9pKSk7XG4gICAgLy8gTm93IGNoZWNrIGZvciB0aGUgZm9ybXVsYVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KChjb250ZW50KSA9PiBjb250ZW50LmluY2x1ZGVzKCdBK0InKSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdmYWxscyBiYWNrIHRvIG1vY2sgcHV6emxlIGFuZCBzaG93cyBHYW1lQm9hcmQgaWYgYmFja2VuZCBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiBQcm9taXNlLnJlamVjdCgnZmFpbCcpKTtcbiAgICByZW5kZXIoPEFwcCAvPik7XG4gICAgLy8gV2FpdCBmb3IgdGhlIEdhbWVCb2FyZCB0byBhcHBlYXIgKGZvcm11bGEgXCJBK0JcIiBmcm9tIG1vY2spXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgoY29udGVudCkgPT4gY29udGVudC5pbmNsdWRlcygnQStCJykpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9