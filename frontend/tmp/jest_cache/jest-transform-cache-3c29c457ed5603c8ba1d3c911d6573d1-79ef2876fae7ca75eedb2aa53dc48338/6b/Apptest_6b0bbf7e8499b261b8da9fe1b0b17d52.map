{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/App.test.tsx","mappings":";;;AAAA,iCAA0B;AAC1B,kDAA4F;AAC5F,+BAAwB;AAExB,6CAA6C;AAC7C,UAAU,CAAC,GAAG,EAAE;IACd,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAC1B,OAAO,CAAC,OAAO,CACb,IAAI,QAAQ,CACV,IAAI,CAAC,SAAS,CAAC;QACb,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7B,QAAQ,EAAE,CAAC,KAAK,CAAC;KAClB,CAAC,EACF,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CACjE,CACF,CACF,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,EAAE;IACb,IAAI,CAAC,aAAa,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;IACnB,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,IAAA,cAAM,EAAC,uBAAC,aAAG,KAAG,CAAC,CAAC;QAChB,oEAAoE;QACpE,MAAM,MAAM,GAAG,cAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,IAAA,cAAM,EAAC,uBAAC,aAAG,KAAG,CAAC,CAAC;QAChB,gCAAgC;QAChC,MAAM,IAAA,iCAAyB,EAAC,GAAG,EAAE,CAAC,cAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC3E,4BAA4B;QAC5B,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC7E,MAAM,CAAC,KAAmB,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACjF,IAAA,cAAM,EAAC,uBAAC,aAAG,KAAG,CAAC,CAAC;QAChB,6DAA6D;QAC7D,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACrF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/App.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor, waitForElementToBeRemoved } from '@testing-library/react';\nimport App from './App';\n\n// Mock fetch to always return a valid puzzle\nbeforeEach(() => {\n  global.fetch = jest.fn(() =>\n    Promise.resolve(\n      new Response(\n        JSON.stringify({\n          initial_grid: [[0, 1], [1, 0]],\n          target_grid: [[1, 1], [1, 1]],\n          formulas: ['A+B'],\n        }),\n        { status: 200, headers: { 'Content-Type': 'application/json' } }\n      )\n    )\n  );\n});\n\nafterEach(() => {\n  jest.resetAllMocks();\n});\n\ndescribe('App', () => {\n  it('renders the main logo and footer', () => {\n    render(<App />);\n    // There may be multiple elements with \"MuMu Game\" (logo and footer)\n    const titles = screen.getAllByText(/MuMu Game/i);\n    expect(titles.length).toBeGreaterThan(0);\n    expect(screen.getByText(/Built on Starknet/i)).toBeInTheDocument();\n  });\n\n  it('shows the GameBoard after loading puzzle', async () => {\n    render(<App />);\n    // Wait for loading to disappear\n    await waitForElementToBeRemoved(() => screen.getByText(/loading puzzle/i));\n    // Now check for the formula\n    expect(screen.getByText((content) => content.includes('A+B'))).toBeInTheDocument();\n  });\n\n  it('falls back to mock puzzle and shows GameBoard if backend fails', async () => {\n    (global.fetch as jest.Mock).mockImplementationOnce(() => Promise.reject('fail'));\n    render(<App />);\n    // Wait for the GameBoard to appear (formula \"A+B\" from mock)\n    await waitFor(() => {\n      expect(screen.getByText((content) => content.includes('A+B'))).toBeInTheDocument();\n    });\n  });\n});\n"],"version":3}