b5092cc515e6315648d31282a57c123c
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGameState = void 0;
var _react = require("react");
var _GameTypes = require("../types/GameTypes");
var _formulaUtils = require("../utils/formulaUtils");
var _gridUtils = require("../utils/gridUtils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; } // src/hooks/useGameState.ts
var useGameState = exports.useGameState = function useGameState(initialGrid, targetGrid) {
  var _useState = (0, _react.useState)({
      grid: initialGrid.map(function (row) {
        return _toConsumableArray(row);
      }),
      // Deep copy
      history: [initialGrid.map(function (row) {
        return _toConsumableArray(row);
      })],
      // Save initial state in history
      moves: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    gameState = _useState2[0],
    setGameState = _useState2[1];
  var setGrid = (0, _react.useCallback)(function (newGrid) {
    setGameState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        grid: newGrid,
        history: [].concat(_toConsumableArray(prevState.history), [newGrid]),
        moves: prevState.moves + 1
      });
    });
  }, []);
  var applyMatterTransformation = (0, _react.useCallback)(function (position, formula) {
    var row = position.row,
      col = position.col;
    var grid = gameState.grid;

    // If the cell is empty (VOID), do nothing
    if (grid[row][col] === _GameTypes.MatterType.VOID) return;
    var newGrid = grid.map(function (row) {
      return _toConsumableArray(row);
    }); // Deep copy current grid

    // Get adjacent cells for formula evaluation
    var adjacentCells = (0, _gridUtils.getAdjacentCells)(grid, row, col);
    if (formula) {
      // Apply specific formula if selected
      var shouldTransform = (0, _formulaUtils.evaluateFormula)(formula.condition, grid[row][col], adjacentCells);
      if (shouldTransform) {
        // For simplicity, assuming result is always a MatterType
        newGrid[row][col] = formula.result;
        setGrid(newGrid);
      }
    } else {
      // Auto-apply first applicable formula based on game rules
      // Here we could implement game-specific rules from the project
      var waterToEarth = grid[row][col] === _GameTypes.MatterType.WATER && adjacentCells.filter(function (cell) {
        return cell === _GameTypes.MatterType.FIRE;
      }).length >= 2;
      var earthToAir = grid[row][col] === _GameTypes.MatterType.EARTH && adjacentCells.includes(_GameTypes.MatterType.WATER) && adjacentCells.includes(_GameTypes.MatterType.AETHER);
      var fireToWater = grid[row][col] === _GameTypes.MatterType.FIRE && adjacentCells.every(function (cell) {
        return cell === _GameTypes.MatterType.VOID;
      });
      var airToAether = grid[row][col] === _GameTypes.MatterType.AIR && adjacentCells.filter(function (cell) {
        return cell !== _GameTypes.MatterType.VOID;
      }).length >= 3;
      var aetherToFire = grid[row][col] === _GameTypes.MatterType.AETHER && adjacentCells.includes(_GameTypes.MatterType.AIR);
      if (waterToEarth) {
        newGrid[row][col] = _GameTypes.MatterType.EARTH;
        setGrid(newGrid);
      } else if (earthToAir) {
        newGrid[row][col] = _GameTypes.MatterType.AIR;
        setGrid(newGrid);
      } else if (fireToWater) {
        newGrid[row][col] = _GameTypes.MatterType.WATER;
        setGrid(newGrid);
      } else if (airToAether) {
        newGrid[row][col] = _GameTypes.MatterType.AETHER;
        setGrid(newGrid);
      } else if (aetherToFire) {
        newGrid[row][col] = _GameTypes.MatterType.FIRE;
        setGrid(newGrid);
      }
    }
  }, [gameState, setGrid]);
  var undoLastMove = (0, _react.useCallback)(function () {
    setGameState(function (prevState) {
      if (prevState.history.length <= 1) return prevState;
      var newHistory = _toConsumableArray(prevState.history);
      newHistory.pop(); // Remove current state

      return {
        grid: newHistory[newHistory.length - 1].map(function (row) {
          return _toConsumableArray(row);
        }),
        // Deep copy last state
        history: newHistory,
        moves: prevState.moves - 1
      };
    });
  }, []);
  var resetGrid = (0, _react.useCallback)(function () {
    setGameState({
      grid: initialGrid.map(function (row) {
        return _toConsumableArray(row);
      }),
      // Deep copy initial grid
      history: [initialGrid.map(function (row) {
        return _toConsumableArray(row);
      })],
      // Reset history with only initial state
      moves: 0
    });
  }, [initialGrid]);

  // Check if puzzle is solved by comparing with target grid
  var isSolved = (0, _react.useCallback)(function () {
    if (!targetGrid) return false;
    var grid = gameState.grid;

    // Compare current grid with target grid
    for (var i = 0; i < grid.length; i++) {
      for (var j = 0; j < grid[i].length; j++) {
        if (grid[i][j] !== targetGrid[i][j]) {
          return false;
        }
      }
    }
    return true;
  }, [gameState, targetGrid]);
  return {
    grid: gameState.grid,
    moves: gameState.moves,
    setGrid: setGrid,
    applyMatterTransformation: applyMatterTransformation,
    undoLastMove: undoLastMove,
    resetGrid: resetGrid,
    isSolved: isSolved()
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,