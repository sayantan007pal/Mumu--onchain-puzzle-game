{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/hooks/useBackendFallback.test.tsx","mappings":"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","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/hooks/useBackendFallback.test.tsx"],"sourcesContent":["import { renderHook, act } from '@testing-library/react-hooks';\nimport { useBackendFallback } from './useBackendFallback';\n\nglobal.fetch = jest.fn((url, opts) => {\n  if (url?.toString().includes('/move')) {\n    return Promise.resolve({ json: () => Promise.resolve({ grid: [[1]] }) });\n  }\n  if (url?.toString().includes('/apply_formula')) {\n    return Promise.resolve({ json: () => Promise.resolve({ grid: [[2]] }) });\n  }\n  if (url?.toString().includes('/check_completion')) {\n    return Promise.resolve({ json: () => Promise.resolve({ completed: true }) });\n  }\n  return Promise.reject('Unknown endpoint');\n}) as any;\n\ndescribe('useBackendFallback', () => {\n  it('falls back to backend if wallet connect fails', async () => {\n    const connectWalletFn = jest.fn().mockRejectedValue(new Error('fail'));\n    const onchainFns = {\n      move: jest.fn(),\n      applyFormula: jest.fn(),\n      checkCompletion: jest.fn(),\n    };\n\n    const { result } = renderHook(() =>\n      useBackendFallback(connectWalletFn, onchainFns)\n    );\n\n    // Try to connect wallet (should fail and fallback)\n    await act(async () => {\n      await result.current.tryConnectWallet();\n    });\n\n    expect(result.current.useBackend).toBe(true);\n\n    // Test move fallback\n    const grid = [[0]];\n    const newGrid = await result.current.move(grid, 1, 1, 0, 0, 1);\n    expect(newGrid).toEqual([[1]]);\n\n    // Test applyFormula fallback\n    const formula = { input: 1, output: 2 };\n    const formulaGrid = await result.current.applyFormula(grid, 1, 1, formula);\n    expect(formulaGrid).toEqual([[2]]);\n\n    // Test checkCompletion fallback\n    const completed = await result.current.checkCompletion(grid, [[0]]);\n    expect(completed).toBe(true);\n  });\n\n  it('uses onchainFns if wallet connect succeeds', async () => {\n    const connectWalletFn = jest.fn().mockResolvedValue(undefined);\n    const onchainFns = {\n      move: jest.fn().mockResolvedValue([[9]]),\n      applyFormula: jest.fn().mockResolvedValue([[8]]),\n      checkCompletion: jest.fn().mockResolvedValue(false),\n    };\n\n    const { result } = renderHook(() =>\n      useBackendFallback(connectWalletFn, onchainFns)\n    );\n\n    // Try to connect wallet (should succeed)\n    await act(async () => {\n      await result.current.tryConnectWallet();\n    });\n\n    expect(result.current.useBackend).toBe(false);\n\n    // Test move onchain\n    const grid = [[0]];\n    const newGrid = await result.current.move(grid, 1, 1, 0, 0, 1);\n    expect(newGrid).toEqual([[9]]);\n    expect(onchainFns.move).toHaveBeenCalled();\n\n    // Test applyFormula onchain\n    const formula = { input: 1, output: 2 };\n    const formulaGrid = await result.current.applyFormula(grid, 1, 1, formula);\n    expect(formulaGrid).toEqual([[8]]);\n    expect(onchainFns.applyFormula).toHaveBeenCalled();\n\n    // Test checkCompletion onchain\n    const completed = await result.current.checkCompletion(grid, [[0]]);\n    expect(completed).toBe(false);\n    expect(onchainFns.checkCompletion).toHaveBeenCalled();\n  });\n}); "],"version":3}