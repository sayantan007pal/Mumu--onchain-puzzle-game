{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/utils/gridUtils.ts","mappings":"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","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/utils/gridUtils.ts"],"sourcesContent":["// src/utils/gridUtils.ts\nimport { MatterType } from '../types/GameTypes';\n\n/**\n * Get adjacent cell matter types for a specific cell\n * @param grid The current game grid\n * @param row The row of the target cell\n * @param col The column of the target cell\n * @returns Array of adjacent matter types\n */\nexport const getAdjacentCells = (grid: MatterType[][], row: number, col: number): MatterType[] => {\n  const adjacentCells: MatterType[] = [];\n  const directions = [\n    [-1, 0],  // Up\n    [1, 0],   // Down\n    [0, -1],  // Left\n    [0, 1],   // Right\n    [-1, -1], // Up-Left\n    [-1, 1],  // Up-Right\n    [1, -1],  // Down-Left\n    [1, 1]    // Down-Right\n  ];\n  \n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    \n    // Check if the adjacent cell is within bounds\n    if (\n      newRow >= 0 && \n      newRow < grid.length && \n      newCol >= 0 && \n      newCol < grid[0].length\n    ) {\n      adjacentCells.push(grid[newRow][newCol]);\n    } else {\n      // For cells outside the grid, consider them as VOID\n      adjacentCells.push(MatterType.VOID);\n    }\n  }\n  \n  return adjacentCells;\n};\n\n/**\n * Create a deep copy of a grid\n * @param grid The grid to copy\n * @returns A new grid with the same values\n */\nexport const copyGrid = (grid: MatterType[][]): MatterType[][] => {\n  return grid.map(row => [...row]);\n};\n\n/**\n * Check if two grids are equal\n * @param gridA First grid\n * @param gridB Second grid\n * @returns True if grids are equal, false otherwise\n */\nexport const areGridsEqual = (gridA: MatterType[][], gridB: MatterType[][]): boolean => {\n  if (gridA.length !== gridB.length || gridA[0].length !== gridB[0].length) {\n    return false;\n  }\n  \n  for (let i = 0; i < gridA.length; i++) {\n    for (let j = 0; j < gridA[i].length; j++) {\n      if (gridA[i][j] !== gridB[i][j]) {\n        return false;\n      }\n    }\n  }\n  \n  return true;\n};\n\n/**\n * Count the number of specific matter type in a grid\n * @param grid The game grid\n * @param type Matter type to count\n * @returns Count of the specified matter type\n */\nexport const countMatterType = (grid: MatterType[][], type: MatterType): number => {\n  let count = 0;\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === type) {\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n"],"version":3}