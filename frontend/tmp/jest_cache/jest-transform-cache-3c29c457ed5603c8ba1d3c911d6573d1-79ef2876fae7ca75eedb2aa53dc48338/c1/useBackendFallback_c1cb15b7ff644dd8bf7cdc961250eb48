f2dd47df451bd6f2614bfbbf64b972f9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBackendFallback = useBackendFallback;
const react_1 = require("react");
const BACKEND_URL = 'http://localhost:5000'; // Change if deployed elsewhere
async function backendMove(grid, width, height, x, y, direction) {
    const res = await fetch(`${BACKEND_URL}/move`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ grid, width, height, x, y, direction }),
    });
    return (await res.json()).grid;
}
async function backendApplyFormula(grid, width, height, formula) {
    const res = await fetch(`${BACKEND_URL}/apply_formula`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ grid, width, height, formula }),
    });
    return (await res.json()).grid;
}
async function backendCheckCompletion(grid, target) {
    const res = await fetch(`${BACKEND_URL}/check_completion`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ grid, target }),
    });
    return (await res.json()).completed;
}
function useBackendFallback(connectWalletFn, onchainFns) {
    // onchainFns: { move, applyFormula, checkCompletion }
    const [useBackend, setUseBackend] = (0, react_1.useState)(false);
    // Try to connect wallet, fallback if fails
    const tryConnectWallet = (0, react_1.useCallback)(async () => {
        try {
            await connectWalletFn();
            setUseBackend(false);
            return true;
        }
        catch (e) {
            setUseBackend(true);
            return false;
        }
    }, [connectWalletFn]);
    // Move
    const move = (0, react_1.useCallback)(async (grid, width, height, x, y, direction) => {
        if (useBackend) {
            return backendMove(grid, width, height, x, y, direction);
        }
        else {
            return onchainFns.move(grid, width, height, x, y, direction);
        }
    }, [useBackend, onchainFns]);
    // Apply formula
    const applyFormula = (0, react_1.useCallback)(async (grid, width, height, formula) => {
        if (useBackend) {
            return backendApplyFormula(grid, width, height, formula);
        }
        else {
            return onchainFns.applyFormula(grid, width, height, formula);
        }
    }, [useBackend, onchainFns]);
    // Check completion
    const checkCompletion = (0, react_1.useCallback)(async (grid, target) => {
        if (useBackend) {
            return backendCheckCompletion(grid, target);
        }
        else {
            return onchainFns.checkCompletion(grid, target);
        }
    }, [useBackend, onchainFns]);
    return {
        useBackend,
        tryConnectWallet,
        move,
        applyFormula,
        checkCompletion,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,