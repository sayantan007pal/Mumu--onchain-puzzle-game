{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/utils/formulaUtils.ts","mappings":";;;AAAA,4BAA4B;AAC5B,kDAA2E;AAE3E;;;;;;GAMG;AACI,MAAM,eAAe,GAAG,CAC7B,SAA2B,EAC3B,UAAsB,EACtB,aAA2B,EAClB,EAAE;IACX,sEAAsE;IACtE,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;QACjC,OAAO,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC;IACvC,CAAC;IAED,mBAAmB;IACnB,IAAI,SAAS,CAAC,QAAQ,KAAK,GAAG,EAAE,CAAC;QAC/B,iEAAiE;QACjE,MAAM,UAAU,GAAG,IAAA,uBAAe,EAAC,SAAS,CAAC,IAAK,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;QAC/E,MAAM,WAAW,GAAG,IAAA,uBAAe,EAAC,SAAS,CAAC,KAAM,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;QACjF,OAAO,UAAU,IAAI,WAAW,CAAC;IACnC,CAAC;IAED,IAAI,SAAS,CAAC,QAAQ,KAAK,GAAG,EAAE,CAAC;QAC/B,iFAAiF;QACjF,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAK,CAAC,IAAK,CAAC;QACvC,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QACrE,OAAO,KAAK,KAAK,SAAS,CAAC,QAAS,CAAC;IACvC,CAAC;IAED,IAAI,SAAS,CAAC,QAAQ,KAAK,GAAG,EAAE,CAAC;QAC/B,yFAAyF;QACzF,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAK,CAAC,IAAK,CAAC;QACvC,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QACrE,OAAO,KAAK,GAAG,SAAS,CAAC,QAAS,CAAC;IACrC,CAAC;IAED,IAAI,SAAS,CAAC,QAAQ,KAAK,GAAG,EAAE,CAAC;QAC/B,sFAAsF;QACtF,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAK,CAAC,IAAK,CAAC;QACvC,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QACrE,OAAO,KAAK,GAAG,SAAS,CAAC,QAAS,CAAC;IACrC,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAxCW,QAAA,eAAe,mBAwC1B;AAEF;;;;GAIG;AACI,MAAM,eAAe,GAAG,CAAC,IAAgB,EAAU,EAAE;IAC1D,QAAQ,IAAI,EAAE,CAAC;QACb,KAAK,sBAAU,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC;QACnC,KAAK,sBAAU,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC;QACnC,KAAK,sBAAU,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC;QAClC,KAAK,sBAAU,CAAC,GAAG,CAAC,CAAC,OAAO,IAAI,CAAC;QACjC,KAAK,sBAAU,CAAC,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC;QACpC,KAAK,sBAAU,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC;QACnC,KAAK,sBAAU,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC;QACnC,KAAK,sBAAU,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC;QACjC,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC;IACtB,CAAC;AACH,CAAC,CAAC;AAZW,QAAA,eAAe,mBAY1B","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/utils/formulaUtils.ts"],"sourcesContent":["// src/utils/formulaUtils.ts\nimport { MatterType, FormulaCondition, Formula } from '../types/GameTypes';\n\n/**\n * Evaluate a formula condition against a matter type and its adjacent cells\n * @param condition The formula condition to evaluate\n * @param matterType The current matter type\n * @param adjacentCells Array of adjacent matter types\n * @returns boolean indicating if the condition is satisfied\n */\nexport const evaluateFormula = (\n  condition: FormulaCondition, \n  matterType: MatterType, \n  adjacentCells: MatterType[]\n): boolean => {\n  // If condition has a direct type, check if it matches the matter type\n  if (condition.type !== undefined) {\n    return matterType === condition.type;\n  }\n  \n  // Handle operators\n  if (condition.operator === '+') {\n    // For addition, both left and right conditions must be satisfied\n    const leftResult = evaluateFormula(condition.left!, matterType, adjacentCells);\n    const rightResult = evaluateFormula(condition.right!, matterType, adjacentCells);\n    return leftResult && rightResult;\n  }\n  \n  if (condition.operator === '*') {\n    // For multiplication, check if the element appears the specified number of times\n    const elemType = condition.left!.type!;\n    const count = adjacentCells.filter(cell => cell === elemType).length;\n    return count === condition.quantity!;\n  }\n  \n  if (condition.operator === '>') {\n    // For greater than, check if the element appears more than the specified number of times\n    const elemType = condition.left!.type!;\n    const count = adjacentCells.filter(cell => cell === elemType).length;\n    return count > condition.quantity!;\n  }\n  \n  if (condition.operator === '<') {\n    // For less than, check if the element appears less than the specified number of times\n    const elemType = condition.left!.type!;\n    const count = adjacentCells.filter(cell => cell === elemType).length;\n    return count < condition.quantity!;\n  }\n  \n  return false;\n};\n\n/**\n * Gets the symbol for a given matter type\n * @param type MatterType enum value\n * @returns Symbol string (emoji)\n */\nexport const getMatterSymbol = (type: MatterType): string => {\n  switch (type) {\n    case MatterType.EARTH: return '🟤';\n    case MatterType.WATER: return '🟦';\n    case MatterType.FIRE: return '🔥';\n    case MatterType.AIR: return '💨';\n    case MatterType.AETHER: return '🟣';\n    case MatterType.STEAM: return '💭';\n    case MatterType.PLANT: return '🌱';\n    case MatterType.VOID: return '⬛';\n    default: return '❓';\n  }\n};\n"],"version":3}