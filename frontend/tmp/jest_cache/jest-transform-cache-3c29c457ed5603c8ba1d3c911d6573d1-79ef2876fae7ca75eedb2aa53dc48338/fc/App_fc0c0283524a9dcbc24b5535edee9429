90ae627ea5367edc6f73d7f7c9c05052
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// src/App.tsx
const react_1 = require("react");
const GameBoard_1 = require("./components/GameBoard");
const PuzzleSelector_1 = require("./components/PuzzleSelector");
const PuzzleCreator_1 = require("./components/PuzzleCreator");
require("./styles/App.css");
const MOCK_PUZZLE = {
    initialGrid: [[0, 1], [1, 0]],
    targetGrid: [[1, 1], [1, 1]],
    formulas: ['A+B'],
};
const App = () => {
    const [view, setView] = (0, react_1.useState)('PUZZLE_SELECT');
    const [selectedPuzzleId, setSelectedPuzzleId] = (0, react_1.useState)(1); // Default to puzzle 1 for dev
    const [puzzleData, setPuzzleData] = (0, react_1.useState)(null);
    const [showSuccessModal, setShowSuccessModal] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    // Always use backend or mock data, with robust error handling
    (0, react_1.useEffect)(() => {
        if (selectedPuzzleId !== null) {
            setError(null);
            fetch(`http://localhost:5000/puzzle/${selectedPuzzleId}`)
                .then(res => {
                if (!res.ok)
                    throw new Error('Backend error');
                return res.json();
            })
                .then(data => {
                setPuzzleData({
                    initialGrid: data.initial_grid,
                    targetGrid: data.target_grid,
                    formulas: data.formulas,
                });
                setView('PUZZLE_PLAY');
            })
                .catch((err) => {
                console.error('Falling back to mock puzzle:', err);
                setPuzzleData(MOCK_PUZZLE);
                setView('PUZZLE_PLAY');
                setError('Backend unavailable, using mock puzzle.');
            });
        }
    }, [selectedPuzzleId]);
    const handlePuzzleSelect = (puzzleId) => setSelectedPuzzleId(puzzleId);
    const handlePuzzleSolved = () => {
        setShowSuccessModal(true);
        setTimeout(() => {
            setShowSuccessModal(false);
            setView('PUZZLE_SELECT');
            setSelectedPuzzleId(1); // Always default to puzzle 1 for dev
            setPuzzleData(null);
        }, 3000);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "app-container", "data-testid": "app-container", children: [(0, jsx_runtime_1.jsxs)("header", { className: "app-header", children: [(0, jsx_runtime_1.jsx)("div", { className: "app-title", onClick: () => setView('PUZZLE_SELECT'), children: "MuMu Game" }), (0, jsx_runtime_1.jsxs)("nav", { className: "app-nav", children: [(0, jsx_runtime_1.jsx)("button", { className: view === 'PUZZLE_SELECT' ? 'active' : '', onClick: () => setView('PUZZLE_SELECT'), children: "Play" }), (0, jsx_runtime_1.jsx)("button", { className: view === 'PUZZLE_CREATE' ? 'active' : '', onClick: () => setView('PUZZLE_CREATE'), children: "Create" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "app-toggles", children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "toggle-backend", onClick: () => { }, children: "Backend/Mock" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "toggle-darkmode", onClick: () => { }, children: "Dark Mode" })] })] }), (0, jsx_runtime_1.jsxs)("main", { className: "app-content", children: [error && ((0, jsx_runtime_1.jsx)("div", { role: "alert", style: { color: 'red', marginBottom: 16 }, children: error })), view === 'PUZZLE_SELECT' && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(PuzzleSelector_1.default, { onSelectPuzzle: handlePuzzleSelect }), (0, jsx_runtime_1.jsx)("div", { className: "action-buttons", children: (0, jsx_runtime_1.jsx)("button", { onClick: () => setView('PUZZLE_CREATE'), children: "Create Your Own Puzzle" }) })] })), view === 'PUZZLE_PLAY' && !puzzleData && ((0, jsx_runtime_1.jsx)("div", { className: "loading", children: "Loading puzzle..." })), view === 'PUZZLE_PLAY' && puzzleData && ((0, jsx_runtime_1.jsx)(GameBoard_1.default, { puzzleId: selectedPuzzleId, initialGrid: puzzleData.initialGrid, targetGrid: puzzleData.targetGrid, formulas: puzzleData.formulas, onSolve: handlePuzzleSolved })), view === 'PUZZLE_CREATE' && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(PuzzleCreator_1.default, {}), (0, jsx_runtime_1.jsx)("div", { className: "action-buttons", children: (0, jsx_runtime_1.jsx)("button", { onClick: () => setView('PUZZLE_SELECT'), children: "Back to Puzzles" }) })] }))] }), (0, jsx_runtime_1.jsx)("footer", { className: "app-footer", children: (0, jsx_runtime_1.jsx)("p", { children: "Built on Starknet \u2022 \u00A9 2025 MuMu Game" }) }), showSuccessModal && ((0, jsx_runtime_1.jsx)("div", { className: "success-modal", children: (0, jsx_runtime_1.jsxs)("div", { className: "success-modal-content", children: [(0, jsx_runtime_1.jsx)("h2", { children: "\uD83C\uDF89 Puzzle Solved! \uD83C\uDF89" }), (0, jsx_runtime_1.jsx)("p", { children: "Congratulations! You've solved the puzzle." })] }) }))] }));
};
exports.default = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,