40166dfc28a163a4b28cd54050e8317c
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _MatterElement = _interopRequireDefault(require("./MatterElement"));
var _FormulaDisplay = _interopRequireDefault(require("./FormulaDisplay"));
var _useGameState2 = require("../hooks/useGameState");
require("../styles/GameBoard.css");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var GameBoard = function GameBoard(_ref) {
  var puzzleId = _ref.puzzleId,
    initialGrid = _ref.initialGrid,
    targetGrid = _ref.targetGrid,
    formulas = _ref.formulas,
    onSolve = _ref.onSolve;
  var _useGameState = (0, _useGameState2.useGameState)(initialGrid, targetGrid),
    grid = _useGameState.grid,
    moves = _useGameState.moves,
    setGrid = _useGameState.setGrid,
    applyMatterTransformation = _useGameState.applyMatterTransformation,
    undoLastMove = _useGameState.undoLastMove,
    resetGrid = _useGameState.resetGrid,
    isSolved = _useGameState.isSolved;
  var _useState = (0, _react.useState)(null),
    _useState2 = _slicedToArray(_useState, 2),
    selectedElement = _useState2[0],
    setSelectedElement = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = _slicedToArray(_useState3, 2),
    moveCount = _useState4[0],
    setMoveCount = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = _slicedToArray(_useState5, 2),
    completed = _useState6[0],
    setCompleted = _useState6[1];

  // Handle element click for local gameplay
  var handleElementClick = function handleElementClick(x, y) {
    if (completed) return;
    if (!selectedElement) {
      setSelectedElement({
        x: x,
        y: y
      });
    } else {
      // Only allow adjacent moves
      var dx = Math.abs(selectedElement.x - x);
      var dy = Math.abs(selectedElement.y - y);
      if (dx === 1 && dy === 0 || dx === 0 && dy === 1) {
        // Example: swap elements (customize as needed)
        var newGrid = grid.map(function (row) {
          return _toConsumableArray(row);
        });
        var temp = newGrid[selectedElement.y][selectedElement.x];
        newGrid[selectedElement.y][selectedElement.x] = newGrid[y][x];
        newGrid[y][x] = temp;
        setGrid(newGrid);
        setMoveCount(moveCount + 1);
        if (JSON.stringify(newGrid) === JSON.stringify(targetGrid)) {
          setCompleted(true);
          onSolve();
        }
      }
      setSelectedElement(null);
    }
  };
  if (!grid) return /*#__PURE__*/_react["default"].createElement("div", {
    className: "error"
  }, "No game state available");
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "game-board-container"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "game-info"
  }, /*#__PURE__*/_react["default"].createElement("h2", null, "Puzzle #", puzzleId), /*#__PURE__*/_react["default"].createElement("p", null, "Moves: ", moveCount), completed && /*#__PURE__*/_react["default"].createElement("div", {
    className: "completed-banner"
  }, "Completed! \uD83C\uDF89")), /*#__PURE__*/_react["default"].createElement("div", {
    className: "formula-section"
  }, /*#__PURE__*/_react["default"].createElement("h3", null, "Transformation Formulas"), formulas.map(function (formula, index) {
    return /*#__PURE__*/_react["default"].createElement(_FormulaDisplay["default"], {
      key: index,
      formula: formula
    });
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "game-board",
    "aria-label": "Game Board",
    style: {
      gridTemplateColumns: "repeat(".concat(grid[0].length, ", 60px)"),
      gridTemplateRows: "repeat(".concat(grid.length, ", 60px)")
    }
  }, grid.map(function (row, y) {
    return row.map(function (elementType, x) {
      return /*#__PURE__*/_react["default"].createElement(_MatterElement["default"], {
        key: "".concat(x, "-").concat(y),
        type: elementType,
        x: x,
        y: y,
        isSelected: (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.x) === x && (selectedElement === null || selectedElement === void 0 ? void 0 : selectedElement.y) === y,
        onClick: function onClick() {
          return handleElementClick(x, y);
        }
      });
    });
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "game-controls"
  }, /*#__PURE__*/_react["default"].createElement("button", {
    onClick: function onClick() {
      setGrid(initialGrid);
      setMoveCount(0);
      setCompleted(false);
      setSelectedElement(null);
    },
    className: "reset-button"
  }, "Reset Puzzle")));
};
var _default = exports["default"] = GameBoard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,