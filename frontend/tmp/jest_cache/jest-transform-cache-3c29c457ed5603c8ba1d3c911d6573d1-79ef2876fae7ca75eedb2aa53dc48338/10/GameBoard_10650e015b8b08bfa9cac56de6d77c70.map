{"version":3,"names":["_react","_interopRequireWildcard","require","_MatterElement","_interopRequireDefault","_FormulaDisplay","_useGameState2","e","__esModule","t","WeakMap","r","n","o","i","f","__proto__","_typeof","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","Symbol","iterator","Array","from","isArray","_arrayLikeToArray","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","a","toString","slice","constructor","name","test","length","l","u","next","done","push","value","GameBoard","_ref","puzzleId","initialGrid","targetGrid","formulas","onSolve","_useGameState","useGameState","grid","moves","setGrid","applyMatterTransformation","undoLastMove","resetGrid","isSolved","_useState","useState","_useState2","selectedElement","setSelectedElement","_useState3","_useState4","moveCount","setMoveCount","_useState5","_useState6","completed","setCompleted","handleElementClick","x","y","dx","Math","abs","dy","newGrid","map","row","temp","JSON","stringify","createElement","className","formula","index","key","style","gridTemplateColumns","concat","gridTemplateRows","elementType","type","isSelected","onClick","_default","exports"],"sources":["GameBoard.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MatterElement from './MatterElement';\nimport FormulaDisplay from './FormulaDisplay';\nimport { useGameState } from '../hooks/useGameState';\nimport { MatterType, Direction, Formula } from '../types/GameTypes';\nimport '../styles/GameBoard.css';\n\ninterface GameBoardProps {\n  puzzleId: number;\n  initialGrid: MatterType[][];\n  targetGrid: MatterType[][];\n  formulas: Formula[];\n  onSolve: () => void;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({ puzzleId, initialGrid, targetGrid, formulas, onSolve }) => {\n  const { grid, moves, setGrid, applyMatterTransformation, undoLastMove, resetGrid, isSolved } = useGameState(initialGrid, targetGrid);\n  const [selectedElement, setSelectedElement] = useState<{ x: number, y: number } | null>(null);\n  const [moveCount, setMoveCount] = useState(0);\n  const [completed, setCompleted] = useState(false);\n\n  // Handle element click for local gameplay\n  const handleElementClick = (x: number, y: number) => {\n    if (completed) return;\n    if (!selectedElement) {\n      setSelectedElement({ x, y });\n    } else {\n      // Only allow adjacent moves\n      const dx = Math.abs(selectedElement.x - x);\n      const dy = Math.abs(selectedElement.y - y);\n      if ((dx === 1 && dy === 0) || (dx === 0 && dy === 1)) {\n        // Example: swap elements (customize as needed)\n        const newGrid = grid.map(row => [...row]);\n        const temp = newGrid[selectedElement.y][selectedElement.x];\n        newGrid[selectedElement.y][selectedElement.x] = newGrid[y][x];\n        newGrid[y][x] = temp;\n        setGrid(newGrid);\n        setMoveCount(moveCount + 1);\n        if (JSON.stringify(newGrid) === JSON.stringify(targetGrid)) {\n          setCompleted(true);\n          onSolve();\n        }\n      }\n      setSelectedElement(null);\n    }\n  };\n\n  if (!grid) return <div className=\"error\">No game state available</div>;\n\n  return (\n    <div className=\"game-board-container\">\n      <div className=\"game-info\">\n        <h2>Puzzle #{puzzleId}</h2>\n        <p>Moves: {moveCount}</p>\n        {completed && <div className=\"completed-banner\">Completed! ðŸŽ‰</div>}\n      </div>\n      <div className=\"formula-section\">\n        <h3>Transformation Formulas</h3>\n        {formulas.map((formula, index) => (\n          <FormulaDisplay key={index} formula={formula} />\n        ))}\n      </div>\n      <div\n        className=\"game-board\"\n        aria-label=\"Game Board\"\n        style={{\n          gridTemplateColumns: `repeat(${grid[0].length}, 60px)`,\n          gridTemplateRows: `repeat(${grid.length}, 60px)`\n        }}\n      >\n        {grid.map((row, y) =>\n          row.map((elementType, x) => (\n            <MatterElement\n              key={`${x}-${y}`}\n              type={elementType}\n              x={x}\n              y={y}\n              isSelected={selectedElement?.x === x && selectedElement?.y === y}\n              onClick={() => handleElementClick(x, y)}\n            />\n          ))\n        )}\n      </div>\n      <div className=\"game-controls\">\n        <button\n          onClick={() => {\n            setGrid(initialGrid);\n            setMoveCount(0);\n            setCompleted(false);\n            setSelectedElement(null);\n          }}\n          className=\"reset-button\"\n        >\n          Reset Puzzle\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoard;"],"mappings":"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","ignoreList":[]}