25dd2088844ce61f10dbde74baa51ea3
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useStarknet2 = require("../hooks/useStarknet");
var _GameTypes = require("../types/GameTypes");
require("../styles/PuzzleCreator.css");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == _typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a '" + n + "' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; } // Ensure this path is correct or update it to the correct path
var GRID_SIZE = 10; // Define GRID_SIZE with an appropriate value

var PuzzleCreator = function PuzzleCreator() {
  var _useStarknet = (0, _useStarknet2.useStarknet)(),
    account = _useStarknet.account,
    contract = _useStarknet.contract,
    isConnecting = _useStarknet.isConnecting,
    connectWallet = _useStarknet.connectWallet;
  var _useState = (0, _react.useState)(''),
    _useState2 = _slicedToArray(_useState, 2),
    puzzleName = _useState2[0],
    setPuzzleName = _useState2[1];
  var _useState3 = (0, _react.useState)(1),
    _useState4 = _slicedToArray(_useState3, 2),
    difficulty = _useState4[0],
    setDifficulty = _useState4[1];
  var _useState5 = (0, _react.useState)(Array(GRID_SIZE).fill(null).map(function () {
      return Array(GRID_SIZE).fill(_GameTypes.MatterType.VOID);
    })),
    _useState6 = _slicedToArray(_useState5, 2),
    grid = _useState6[0],
    setGrid = _useState6[1];
  var _useState7 = (0, _react.useState)(_GameTypes.MatterType.EARTH),
    _useState8 = _slicedToArray(_useState7, 2),
    selectedMatterType = _useState8[0],
    setSelectedMatterType = _useState8[1];
  var _useState9 = (0, _react.useState)([]),
    _useState0 = _slicedToArray(_useState9, 2),
    formulas = _useState0[0],
    setFormulas = _useState0[1];
  var _useState1 = (0, _react.useState)({
      conditionText: '',
      resultType: _GameTypes.MatterType.WATER
    }),
    _useState10 = _slicedToArray(_useState1, 2),
    currentFormula = _useState10[0],
    setCurrentFormula = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = _slicedToArray(_useState11, 2),
    error = _useState12[0],
    setError = _useState12[1];
  var _useState13 = (0, _react.useState)(null),
    _useState14 = _slicedToArray(_useState13, 2),
    success = _useState14[0],
    setSuccess = _useState14[1];
  var _useState15 = (0, _react.useState)(false),
    _useState16 = _slicedToArray(_useState15, 2),
    submitting = _useState16[0],
    setSubmitting = _useState16[1];
  var handleElementSelect = function handleElementSelect(type) {
    setSelectedMatterType(type);
  };
  var handleGridClick = function handleGridClick(x, y) {
    var newGrid = _toConsumableArray(grid);
    newGrid[y][x] = selectedMatterType;
    setGrid(newGrid);
  };
  var getMatterSymbol = function getMatterSymbol(type) {
    switch (type) {
      case _GameTypes.MatterType.EARTH:
        return '🟤';
      case _GameTypes.MatterType.WATER:
        return '🟦';
      case _GameTypes.MatterType.FIRE:
        return '🟥';
      case _GameTypes.MatterType.AIR:
        return '⬜';
      case _GameTypes.MatterType.VOID:
        return '⬛';
      case _GameTypes.MatterType.STEAM:
        return '💨';
      case _GameTypes.MatterType.PLANT:
        return '🌱';
      default:
        return '?';
    }
  };
  var addFormula = function addFormula() {
    try {
      if (!currentFormula.conditionText.trim()) {
        setError('Formula condition cannot be empty');
        return;
      }

      // In a real implementation, you would validate and parse the formula text
      // Here we're simplifying and assuming the text is valid
      var newFormula = {
        condition: _parseCondition(currentFormula.conditionText),
        result: currentFormula.resultType
      };
      setFormulas([].concat(_toConsumableArray(formulas), [newFormula]));
      setCurrentFormula({
        conditionText: '',
        resultType: _GameTypes.MatterType.WATER
      });
      setError(null);
    } catch (err) {
      setError("Invalid formula: ".concat(err.message));
    }
  };
  var _parseCondition = function parseCondition(text) {
    // This is a simplified parser for demonstration
    // In a real implementation, you'd have a more complex parser

    // Example: "WATER + FIRE" or "EARTH + (WATER * 3)"
    if (text.includes('+')) {
      var _text$split$map = text.split('+').map(function (part) {
          return part.trim();
        }),
        _text$split$map2 = _slicedToArray(_text$split$map, 2),
        left = _text$split$map2[0],
        right = _text$split$map2[1];
      return {
        operator: '+',
        left: _parseCondition(left),
        right: _parseCondition(right)
      };
    } else if (text.includes('*')) {
      var _text$split$map3 = text.split('*').map(function (part) {
          return part.trim();
        }),
        _text$split$map4 = _slicedToArray(_text$split$map3, 2),
        element = _text$split$map4[0],
        quantity = _text$split$map4[1];
      return {
        operator: '*',
        left: _parseCondition(element),
        quantity: parseInt(quantity)
      };
    } else if (text.includes('>')) {
      var _text$split$map5 = text.split('>').map(function (part) {
          return part.trim();
        }),
        _text$split$map6 = _slicedToArray(_text$split$map5, 2),
        _element = _text$split$map6[0],
        _quantity = _text$split$map6[1];
      return {
        operator: '>',
        left: _parseCondition(_element),
        quantity: parseInt(_quantity)
      };
    } else {
      // Assume it's a simple element type
      switch (text.toUpperCase()) {
        case 'EARTH':
          return {
            type: _GameTypes.MatterType.EARTH
          };
        case 'WATER':
          return {
            type: _GameTypes.MatterType.WATER
          };
        case 'FIRE':
          return {
            type: _GameTypes.MatterType.FIRE
          };
        case 'AIR':
          return {
            type: _GameTypes.MatterType.AIR
          };
        case 'VOID':
          return {
            type: _GameTypes.MatterType.VOID
          };
        case 'STEAM':
          return {
            type: _GameTypes.MatterType.STEAM
          };
        case 'PLANT':
          return {
            type: _GameTypes.MatterType.PLANT
          };
        default:
          throw new Error("Unknown element type: ".concat(text));
      }
    }
  };
  var removeFormula = function removeFormula(index) {
    var newFormulas = _toConsumableArray(formulas);
    newFormulas.splice(index, 1);
    setFormulas(newFormulas);
  };
  var submitPuzzle = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var hasElements, _gameState, result;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            setError(null);
            setSuccess(null);
            setSubmitting(true);
            if (account) {
              _context.next = 6;
              break;
            }
            throw new Error('Please connect your wallet first');
          case 6:
            if (puzzleName.trim()) {
              _context.next = 8;
              break;
            }
            throw new Error('Puzzle name cannot be empty');
          case 8:
            if (!(formulas.length === 0)) {
              _context.next = 10;
              break;
            }
            throw new Error('Please add at least one transformation formula');
          case 10:
            // Check if any elements are placed on the grid
            hasElements = grid.some(function (row) {
              return row.some(function (cell) {
                return cell !== _GameTypes.MatterType.VOID;
              });
            });
            if (hasElements) {
              _context.next = 13;
              break;
            }
            throw new Error('Please place at least one element on the grid');
          case 13:
            _gameState = {
              grid: grid,
              history: [grid],
              moves: 0
            }; // Send to contract
            _context.next = 16;
            return contract.create_puzzle(puzzleName, difficulty, _gameState, formulas);
          case 16:
            result = _context.sent;
            if (!result.success) {
              _context.next = 25;
              break;
            }
            setSuccess("Puzzle created successfully! Puzzle ID: ".concat(result.puzzleId));

            // Reset form
            setPuzzleName('');
            setDifficulty(1);
            setGrid(Array(GRID_SIZE).fill(null).map(function () {
              return Array(GRID_SIZE).fill(_GameTypes.MatterType.VOID);
            }));
            setFormulas([]);
            _context.next = 26;
            break;
          case 25:
            throw new Error('Failed to create puzzle');
          case 26:
            _context.next = 32;
            break;
          case 28:
            _context.prev = 28;
            _context.t0 = _context["catch"](0);
            console.error('Error creating puzzle:', _context.t0);
            setError(_context.t0.message || 'Failed to create puzzle');
          case 32:
            _context.prev = 32;
            setSubmitting(false);
            return _context.finish(32);
          case 35:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 28, 32, 35]]);
    }));
    return function submitPuzzle() {
      return _ref.apply(this, arguments);
    };
  }();
  if (!account) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "wallet-connect-container"
    }, /*#__PURE__*/_react["default"].createElement("h2", null, "Connect Your Wallet"), /*#__PURE__*/_react["default"].createElement("p", null, "Please connect your Starknet wallet to create puzzles"), /*#__PURE__*/_react["default"].createElement("button", {
      className: "connect-button",
      onClick: connectWallet,
      disabled: isConnecting
    }, isConnecting ? 'Connecting...' : 'Connect Wallet'));
  }
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "puzzle-creator"
  }, /*#__PURE__*/_react["default"].createElement("h2", null, "Create New Puzzle"), error && /*#__PURE__*/_react["default"].createElement("div", {
    className: "error-message"
  }, error), success && /*#__PURE__*/_react["default"].createElement("div", {
    className: "success-message"
  }, success), /*#__PURE__*/_react["default"].createElement("div", {
    className: "creator-form"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "form-group"
  }, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "puzzleName"
  }, "Puzzle Name:"), /*#__PURE__*/_react["default"].createElement("input", {
    type: "text",
    id: "puzzleName",
    value: puzzleName,
    onChange: function onChange(e) {
      return setPuzzleName(e.target.value);
    },
    placeholder: "Enter a name for your puzzle"
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "form-group"
  }, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "difficulty"
  }, "Difficulty Level:"), /*#__PURE__*/_react["default"].createElement("select", {
    id: "difficulty",
    value: difficulty,
    onChange: function onChange(e) {
      return setDifficulty(parseInt(e.target.value));
    }
  }, /*#__PURE__*/_react["default"].createElement("option", {
    value: 1
  }, "Easy"), /*#__PURE__*/_react["default"].createElement("option", {
    value: 2
  }, "Medium"), /*#__PURE__*/_react["default"].createElement("option", {
    value: 3
  }, "Hard"), /*#__PURE__*/_react["default"].createElement("option", {
    value: 4
  }, "Expert")))), /*#__PURE__*/_react["default"].createElement("h3", null, "Design Initial Grid"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "element-selector"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "selector-label"
  }, "Select Matter Type:"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "element-buttons"
  }, [_GameTypes.MatterType.VOID, _GameTypes.MatterType.EARTH, _GameTypes.MatterType.WATER, _GameTypes.MatterType.FIRE, _GameTypes.MatterType.AIR].map(function (type) {
    return /*#__PURE__*/_react["default"].createElement("button", {
      key: type,
      className: "element-button ".concat(selectedMatterType === type ? 'selected' : ''),
      onClick: function onClick() {
        return handleElementSelect(type);
      }
    }, getMatterSymbol(type));
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: "grid-creator"
  }, grid.map(function (row, y) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: y,
      className: "grid-row"
    }, row.map(function (cell, x) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        key: "".concat(x, "-").concat(y),
        className: "grid-cell",
        onClick: function onClick() {
          return handleGridClick(x, y);
        }
      }, getMatterSymbol(cell));
    }));
  })), /*#__PURE__*/_react["default"].createElement("h3", null, "Add Transformation Formulas"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "formula-creator"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "formula-input"
  }, /*#__PURE__*/_react["default"].createElement("input", {
    type: "text",
    value: currentFormula.conditionText,
    onChange: function onChange(e) {
      return setCurrentFormula(_objectSpread(_objectSpread({}, currentFormula), {}, {
        conditionText: e.target.value
      }));
    },
    placeholder: "e.g., WATER + FIRE or EARTH + (WATER * 3)"
  }), /*#__PURE__*/_react["default"].createElement("span", {
    className: "formula-arrow"
  }, "\u2192"), /*#__PURE__*/_react["default"].createElement("select", {
    value: currentFormula.resultType,
    onChange: function onChange(e) {
      return setCurrentFormula(_objectSpread(_objectSpread({}, currentFormula), {}, {
        resultType: parseInt(e.target.value)
      }));
    }
  }, [_GameTypes.MatterType.EARTH, _GameTypes.MatterType.WATER, _GameTypes.MatterType.FIRE, _GameTypes.MatterType.AIR, _GameTypes.MatterType.STEAM, _GameTypes.MatterType.PLANT].map(function (type) {
    return /*#__PURE__*/_react["default"].createElement("option", {
      key: type,
      value: type
    }, getMatterSymbol(type), " ", _GameTypes.MatterType[type]);
  })), /*#__PURE__*/_react["default"].createElement("button", {
    onClick: addFormula,
    className: "add-formula-button"
  }, "Add")), /*#__PURE__*/_react["default"].createElement("div", {
    className: "formula-list"
  }, formulas.length === 0 && /*#__PURE__*/_react["default"].createElement("p", {
    className: "no-formulas"
  }, "No formulas added yet."), formulas.map(function (formula, index) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: index,
      className: "formula-item"
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: "formula-condition"
    }, JSON.stringify(formula.condition)), /*#__PURE__*/_react["default"].createElement("span", {
      className: "formula-arrow"
    }, "\u2192"), /*#__PURE__*/_react["default"].createElement("span", {
      className: "formula-result"
    }, typeof formula.result === 'number' ? getMatterSymbol(formula.result) : '?'), /*#__PURE__*/_react["default"].createElement("button", {
      onClick: function onClick() {
        return removeFormula(index);
      },
      className: "remove-formula-button"
    }, "\xD7"));
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: "submit-section"
  }, /*#__PURE__*/_react["default"].createElement("button", {
    onClick: submitPuzzle,
    disabled: submitting,
    className: "submit-button"
  }, submitting ? 'Creating...' : 'Create Puzzle'), /*#__PURE__*/_react["default"].createElement("p", {
    className: "note"
  }, "Note: Creating a puzzle requires a small gas fee on Starknet.")));
};
var _default = exports["default"] = PuzzleCreator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,