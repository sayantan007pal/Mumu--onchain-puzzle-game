{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/components/PuzzleCreator.tsx","mappings":"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","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/components/PuzzleCreator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useStarknet } from '../hooks/useStarknet';\nimport { MatterType, Formula, GameState } from '../types/GameTypes'; // Ensure this path is correct or update it to the correct path\nimport '../styles/PuzzleCreator.css';\n\nconst GRID_SIZE = 10; // Define GRID_SIZE with an appropriate value\n\nexport interface Contract {\n  // Add other methods and properties here\n  create_puzzle(puzzleName: string, difficulty: number, gameState: GameState, formulas: Formula[]): Promise<{ success: boolean; puzzleId: string }>;\n}\n\nconst PuzzleCreator: React.FC = () => {\n  const { account, contract, isConnecting, connectWallet } = useStarknet();\n  const [puzzleName, setPuzzleName] = useState('');\n  const [difficulty, setDifficulty] = useState(1);\n  const [grid, setGrid] = useState<MatterType[][]>(\n    Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(MatterType.VOID))\n  );\n  const [selectedMatterType, setSelectedMatterType] = useState<MatterType>(MatterType.EARTH);\n  const [formulas, setFormulas] = useState<Formula[]>([]);\n  const [currentFormula, setCurrentFormula] = useState<{\n    conditionText: string;\n    resultType: MatterType;\n  }>({\n    conditionText: '',\n    resultType: MatterType.WATER\n  });\n  \n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleElementSelect = (type: MatterType) => {\n    setSelectedMatterType(type);\n  };\n\n  const handleGridClick = (x: number, y: number) => {\n    const newGrid = [...grid];\n    newGrid[y][x] = selectedMatterType;\n    setGrid(newGrid);\n  };\n\n  const getMatterSymbol = (type: MatterType): string => {\n    switch (type) {\n      case MatterType.EARTH: return '🟤';\n      case MatterType.WATER: return '🟦';\n      case MatterType.FIRE: return '🟥';\n      case MatterType.AIR: return '⬜';\n      case MatterType.VOID: return '⬛';\n      case MatterType.STEAM: return '💨';\n      case MatterType.PLANT: return '🌱';\n      default: return '?';\n    }\n  };\n\n  const addFormula = () => {\n    try {\n      if (!currentFormula.conditionText.trim()) {\n        setError('Formula condition cannot be empty');\n        return;\n      }\n\n      // In a real implementation, you would validate and parse the formula text\n      // Here we're simplifying and assuming the text is valid\n      const newFormula: Formula = {\n        condition: parseCondition(currentFormula.conditionText),\n        result: currentFormula.resultType\n      };\n\n      setFormulas([...formulas, newFormula]);\n      setCurrentFormula({\n        conditionText: '',\n        resultType: MatterType.WATER\n      });\n      setError(null);\n    } catch (err: any) {\n      setError(`Invalid formula: ${err.message}`);\n    }\n  };\n\n  const parseCondition = (text: string): any => {\n    // This is a simplified parser for demonstration\n    // In a real implementation, you'd have a more complex parser\n    \n    // Example: \"WATER + FIRE\" or \"EARTH + (WATER * 3)\"\n    if (text.includes('+')) {\n      const [left, right] = text.split('+').map(part => part.trim());\n      return {\n        operator: '+',\n        left: parseCondition(left),\n        right: parseCondition(right)\n      };\n    } else if (text.includes('*')) {\n      const [element, quantity] = text.split('*').map(part => part.trim());\n      return {\n        operator: '*',\n        left: parseCondition(element),\n        quantity: parseInt(quantity)\n      };\n    } else if (text.includes('>')) {\n      const [element, quantity] = text.split('>').map(part => part.trim());\n      return {\n        operator: '>',\n        left: parseCondition(element),\n        quantity: parseInt(quantity)\n      };\n    } else {\n      // Assume it's a simple element type\n      switch (text.toUpperCase()) {\n        case 'EARTH': return { type: MatterType.EARTH };\n        case 'WATER': return { type: MatterType.WATER };\n        case 'FIRE': return { type: MatterType.FIRE };\n        case 'AIR': return { type: MatterType.AIR };\n        case 'VOID': return { type: MatterType.VOID };\n        case 'STEAM': return { type: MatterType.STEAM };\n        case 'PLANT': return { type: MatterType.PLANT };\n        default: throw new Error(`Unknown element type: ${text}`);\n      }\n    }\n  };\n\n  const removeFormula = (index: number) => {\n    const newFormulas = [...formulas];\n    newFormulas.splice(index, 1);\n    setFormulas(newFormulas);\n  };\n\n  const submitPuzzle = async () => {\n    try {\n      setError(null);\n      setSuccess(null);\n      setSubmitting(true);\n\n      if (!account) {\n        throw new Error('Please connect your wallet first');\n      }\n\n      if (!puzzleName.trim()) {\n        throw new Error('Puzzle name cannot be empty');\n      }\n\n      if (formulas.length === 0) {\n        throw new Error('Please add at least one transformation formula');\n      }\n\n      // Check if any elements are placed on the grid\n      const hasElements = grid.some(row => row.some(cell => cell !== MatterType.VOID));\n      if (!hasElements) {\n        throw new Error('Please place at least one element on the grid');\n      }\n\n      const gameState: GameState = {\n        grid,\n        history: [grid],\n        moves: 0,\n      };\n\n      // Send to contract\n      const result = await contract.create_puzzle(\n        puzzleName,\n        difficulty,\n        gameState,\n        formulas\n      );\n\n      if (result.success) {\n        setSuccess(`Puzzle created successfully! Puzzle ID: ${result.puzzleId}`);\n        \n        // Reset form\n        setPuzzleName('');\n        setDifficulty(1);\n        setGrid(Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(MatterType.VOID)));\n        setFormulas([]);\n      } else {\n        throw new Error('Failed to create puzzle');\n      }\n    } catch (err: any) {\n      console.error('Error creating puzzle:', err);\n      setError(err.message || 'Failed to create puzzle');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (!account) {\n    return (\n      <div className=\"wallet-connect-container\">\n        <h2>Connect Your Wallet</h2>\n        <p>Please connect your Starknet wallet to create puzzles</p>\n        <button \n          className=\"connect-button\"\n          onClick={connectWallet}\n          disabled={isConnecting}\n        >\n          {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"puzzle-creator\">\n      <h2>Create New Puzzle</h2>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      {success && <div className=\"success-message\">{success}</div>}\n      \n      <div className=\"creator-form\">\n        <div className=\"form-group\">\n          <label htmlFor=\"puzzleName\">Puzzle Name:</label>\n          <input\n            type=\"text\"\n            id=\"puzzleName\"\n            value={puzzleName}\n            onChange={(e) => setPuzzleName(e.target.value)}\n            placeholder=\"Enter a name for your puzzle\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"difficulty\">Difficulty Level:</label>\n          <select\n            id=\"difficulty\"\n            value={difficulty}\n            onChange={(e) => setDifficulty(parseInt(e.target.value))}\n          >\n            <option value={1}>Easy</option>\n            <option value={2}>Medium</option>\n            <option value={3}>Hard</option>\n            <option value={4}>Expert</option>\n          </select>\n        </div>\n      </div>\n      \n      <h3>Design Initial Grid</h3>\n      <div className=\"element-selector\">\n        <div className=\"selector-label\">Select Matter Type:</div>\n        <div className=\"element-buttons\">\n          {[\n            MatterType.VOID,\n            MatterType.EARTH,\n            MatterType.WATER,\n            MatterType.FIRE,\n            MatterType.AIR\n          ].map((type) => (\n            <button\n              key={type}\n              className={`element-button ${selectedMatterType === type ? 'selected' : ''}`}\n              onClick={() => handleElementSelect(type)}\n            >\n              {getMatterSymbol(type)}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"grid-creator\">\n        {grid.map((row, y) => (\n          <div key={y} className=\"grid-row\">\n            {row.map((cell, x) => (\n              <div\n                key={`${x}-${y}`}\n                className=\"grid-cell\"\n                onClick={() => handleGridClick(x, y)}\n              >\n                {getMatterSymbol(cell)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      <h3>Add Transformation Formulas</h3>\n      <div className=\"formula-creator\">\n        <div className=\"formula-input\">\n          <input\n            type=\"text\"\n            value={currentFormula.conditionText}\n            onChange={(e) => setCurrentFormula({\n              ...currentFormula,\n              conditionText: e.target.value\n            })}\n            placeholder=\"e.g., WATER + FIRE or EARTH + (WATER * 3)\"\n          />\n          <span className=\"formula-arrow\">→</span>\n          <select\n            value={currentFormula.resultType}\n            onChange={(e) => setCurrentFormula({\n              ...currentFormula,\n              resultType: parseInt(e.target.value)\n            })}\n          >\n            {[\n              MatterType.EARTH,\n              MatterType.WATER,\n              MatterType.FIRE,\n              MatterType.AIR,\n              MatterType.STEAM,\n              MatterType.PLANT\n            ].map((type) => (\n              <option key={type} value={type}>\n                {getMatterSymbol(type)} {MatterType[type]}\n              </option>\n            ))}\n          </select>\n          <button onClick={addFormula} className=\"add-formula-button\">\n            Add\n          </button>\n        </div>\n        \n        <div className=\"formula-list\">\n          {formulas.length === 0 && (\n            <p className=\"no-formulas\">No formulas added yet.</p>\n          )}\n          {formulas.map((formula, index) => (\n            <div key={index} className=\"formula-item\">\n              <span className=\"formula-condition\">\n                {/* Simplified display for demonstration */}\n                {JSON.stringify(formula.condition)}\n              </span>\n              <span className=\"formula-arrow\">→</span>\n              <span className=\"formula-result\">\n                {typeof formula.result === 'number' ? getMatterSymbol(formula.result) : '?'}\n              </span>\n              <button\n                onClick={() => removeFormula(index)}\n                className=\"remove-formula-button\"\n              >\n                ×\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"submit-section\">\n        <button\n          onClick={submitPuzzle}\n          disabled={submitting}\n          className=\"submit-button\"\n        >\n          {submitting ? 'Creating...' : 'Create Puzzle'}\n        </button>\n        <p className=\"note\">\n          Note: Creating a puzzle requires a small gas fee on Starknet.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default PuzzleCreator;"],"version":3}