f58c41f5fae75e64331198de84810288
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useStarknet_1 = require("../hooks/useStarknet");
const GameTypes_1 = require("../types/GameTypes"); // Ensure this path is correct or update it to the correct path
require("../styles/PuzzleCreator.css");
const GRID_SIZE = 10; // Define GRID_SIZE with an appropriate value
const PuzzleCreator = () => {
    const { account, contract, isConnecting, connectWallet } = (0, useStarknet_1.useStarknet)();
    const [puzzleName, setPuzzleName] = (0, react_1.useState)('');
    const [difficulty, setDifficulty] = (0, react_1.useState)(1);
    const [grid, setGrid] = (0, react_1.useState)(Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(GameTypes_1.MatterType.VOID)));
    const [selectedMatterType, setSelectedMatterType] = (0, react_1.useState)(GameTypes_1.MatterType.EARTH);
    const [formulas, setFormulas] = (0, react_1.useState)([]);
    const [currentFormula, setCurrentFormula] = (0, react_1.useState)({
        conditionText: '',
        resultType: GameTypes_1.MatterType.WATER
    });
    const [error, setError] = (0, react_1.useState)(null);
    const [success, setSuccess] = (0, react_1.useState)(null);
    const [submitting, setSubmitting] = (0, react_1.useState)(false);
    const handleElementSelect = (type) => {
        setSelectedMatterType(type);
    };
    const handleGridClick = (x, y) => {
        const newGrid = [...grid];
        newGrid[y][x] = selectedMatterType;
        setGrid(newGrid);
    };
    const getMatterSymbol = (type) => {
        switch (type) {
            case GameTypes_1.MatterType.EARTH: return 'ðŸŸ¤';
            case GameTypes_1.MatterType.WATER: return 'ðŸŸ¦';
            case GameTypes_1.MatterType.FIRE: return 'ðŸŸ¥';
            case GameTypes_1.MatterType.AIR: return 'â¬œ';
            case GameTypes_1.MatterType.VOID: return 'â¬›';
            case GameTypes_1.MatterType.STEAM: return 'ðŸ’¨';
            case GameTypes_1.MatterType.PLANT: return 'ðŸŒ±';
            default: return '?';
        }
    };
    const addFormula = () => {
        try {
            if (!currentFormula.conditionText.trim()) {
                setError('Formula condition cannot be empty');
                return;
            }
            // In a real implementation, you would validate and parse the formula text
            // Here we're simplifying and assuming the text is valid
            const newFormula = {
                condition: parseCondition(currentFormula.conditionText),
                result: currentFormula.resultType
            };
            setFormulas([...formulas, newFormula]);
            setCurrentFormula({
                conditionText: '',
                resultType: GameTypes_1.MatterType.WATER
            });
            setError(null);
        }
        catch (err) {
            setError(`Invalid formula: ${err.message}`);
        }
    };
    const parseCondition = (text) => {
        // This is a simplified parser for demonstration
        // In a real implementation, you'd have a more complex parser
        // Example: "WATER + FIRE" or "EARTH + (WATER * 3)"
        if (text.includes('+')) {
            const [left, right] = text.split('+').map(part => part.trim());
            return {
                operator: '+',
                left: parseCondition(left),
                right: parseCondition(right)
            };
        }
        else if (text.includes('*')) {
            const [element, quantity] = text.split('*').map(part => part.trim());
            return {
                operator: '*',
                left: parseCondition(element),
                quantity: parseInt(quantity)
            };
        }
        else if (text.includes('>')) {
            const [element, quantity] = text.split('>').map(part => part.trim());
            return {
                operator: '>',
                left: parseCondition(element),
                quantity: parseInt(quantity)
            };
        }
        else {
            // Assume it's a simple element type
            switch (text.toUpperCase()) {
                case 'EARTH': return { type: GameTypes_1.MatterType.EARTH };
                case 'WATER': return { type: GameTypes_1.MatterType.WATER };
                case 'FIRE': return { type: GameTypes_1.MatterType.FIRE };
                case 'AIR': return { type: GameTypes_1.MatterType.AIR };
                case 'VOID': return { type: GameTypes_1.MatterType.VOID };
                case 'STEAM': return { type: GameTypes_1.MatterType.STEAM };
                case 'PLANT': return { type: GameTypes_1.MatterType.PLANT };
                default: throw new Error(`Unknown element type: ${text}`);
            }
        }
    };
    const removeFormula = (index) => {
        const newFormulas = [...formulas];
        newFormulas.splice(index, 1);
        setFormulas(newFormulas);
    };
    const submitPuzzle = async () => {
        try {
            setError(null);
            setSuccess(null);
            setSubmitting(true);
            if (!account) {
                throw new Error('Please connect your wallet first');
            }
            if (!puzzleName.trim()) {
                throw new Error('Puzzle name cannot be empty');
            }
            if (formulas.length === 0) {
                throw new Error('Please add at least one transformation formula');
            }
            // Check if any elements are placed on the grid
            const hasElements = grid.some(row => row.some(cell => cell !== GameTypes_1.MatterType.VOID));
            if (!hasElements) {
                throw new Error('Please place at least one element on the grid');
            }
            const gameState = {
                grid,
                history: [grid],
                moves: 0,
            };
            // Send to contract
            const result = await contract.create_puzzle(puzzleName, difficulty, gameState, formulas);
            if (result.success) {
                setSuccess(`Puzzle created successfully! Puzzle ID: ${result.puzzleId}`);
                // Reset form
                setPuzzleName('');
                setDifficulty(1);
                setGrid(Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(GameTypes_1.MatterType.VOID)));
                setFormulas([]);
            }
            else {
                throw new Error('Failed to create puzzle');
            }
        }
        catch (err) {
            console.error('Error creating puzzle:', err);
            setError(err.message || 'Failed to create puzzle');
        }
        finally {
            setSubmitting(false);
        }
    };
    if (!account) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "wallet-connect-container", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Connect Your Wallet" }), (0, jsx_runtime_1.jsx)("p", { children: "Please connect your Starknet wallet to create puzzles" }), (0, jsx_runtime_1.jsx)("button", { className: "connect-button", onClick: connectWallet, disabled: isConnecting, children: isConnecting ? 'Connecting...' : 'Connect Wallet' })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "puzzle-creator", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Create New Puzzle" }), error && (0, jsx_runtime_1.jsx)("div", { className: "error-message", children: error }), success && (0, jsx_runtime_1.jsx)("div", { className: "success-message", children: success }), (0, jsx_runtime_1.jsxs)("div", { className: "creator-form", children: [(0, jsx_runtime_1.jsxs)("div", { className: "form-group", children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "puzzleName", children: "Puzzle Name:" }), (0, jsx_runtime_1.jsx)("input", { type: "text", id: "puzzleName", value: puzzleName, onChange: (e) => setPuzzleName(e.target.value), placeholder: "Enter a name for your puzzle" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "form-group", children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "difficulty", children: "Difficulty Level:" }), (0, jsx_runtime_1.jsxs)("select", { id: "difficulty", value: difficulty, onChange: (e) => setDifficulty(parseInt(e.target.value)), children: [(0, jsx_runtime_1.jsx)("option", { value: 1, children: "Easy" }), (0, jsx_runtime_1.jsx)("option", { value: 2, children: "Medium" }), (0, jsx_runtime_1.jsx)("option", { value: 3, children: "Hard" }), (0, jsx_runtime_1.jsx)("option", { value: 4, children: "Expert" })] })] })] }), (0, jsx_runtime_1.jsx)("h3", { children: "Design Initial Grid" }), (0, jsx_runtime_1.jsxs)("div", { className: "element-selector", children: [(0, jsx_runtime_1.jsx)("div", { className: "selector-label", children: "Select Matter Type:" }), (0, jsx_runtime_1.jsx)("div", { className: "element-buttons", children: [
                            GameTypes_1.MatterType.VOID,
                            GameTypes_1.MatterType.EARTH,
                            GameTypes_1.MatterType.WATER,
                            GameTypes_1.MatterType.FIRE,
                            GameTypes_1.MatterType.AIR
                        ].map((type) => ((0, jsx_runtime_1.jsx)("button", { className: `element-button ${selectedMatterType === type ? 'selected' : ''}`, onClick: () => handleElementSelect(type), children: getMatterSymbol(type) }, type))) })] }), (0, jsx_runtime_1.jsx)("div", { className: "grid-creator", children: grid.map((row, y) => ((0, jsx_runtime_1.jsx)("div", { className: "grid-row", children: row.map((cell, x) => ((0, jsx_runtime_1.jsx)("div", { className: "grid-cell", onClick: () => handleGridClick(x, y), children: getMatterSymbol(cell) }, `${x}-${y}`))) }, y))) }), (0, jsx_runtime_1.jsx)("h3", { children: "Add Transformation Formulas" }), (0, jsx_runtime_1.jsxs)("div", { className: "formula-creator", children: [(0, jsx_runtime_1.jsxs)("div", { className: "formula-input", children: [(0, jsx_runtime_1.jsx)("input", { type: "text", value: currentFormula.conditionText, onChange: (e) => setCurrentFormula({
                                    ...currentFormula,
                                    conditionText: e.target.value
                                }), placeholder: "e.g., WATER + FIRE or EARTH + (WATER * 3)" }), (0, jsx_runtime_1.jsx)("span", { className: "formula-arrow", children: "\u2192" }), (0, jsx_runtime_1.jsx)("select", { value: currentFormula.resultType, onChange: (e) => setCurrentFormula({
                                    ...currentFormula,
                                    resultType: parseInt(e.target.value)
                                }), children: [
                                    GameTypes_1.MatterType.EARTH,
                                    GameTypes_1.MatterType.WATER,
                                    GameTypes_1.MatterType.FIRE,
                                    GameTypes_1.MatterType.AIR,
                                    GameTypes_1.MatterType.STEAM,
                                    GameTypes_1.MatterType.PLANT
                                ].map((type) => ((0, jsx_runtime_1.jsxs)("option", { value: type, children: [getMatterSymbol(type), " ", GameTypes_1.MatterType[type]] }, type))) }), (0, jsx_runtime_1.jsx)("button", { onClick: addFormula, className: "add-formula-button", children: "Add" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "formula-list", children: [formulas.length === 0 && ((0, jsx_runtime_1.jsx)("p", { className: "no-formulas", children: "No formulas added yet." })), formulas.map((formula, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "formula-item", children: [(0, jsx_runtime_1.jsx)("span", { className: "formula-condition", children: JSON.stringify(formula.condition) }), (0, jsx_runtime_1.jsx)("span", { className: "formula-arrow", children: "\u2192" }), (0, jsx_runtime_1.jsx)("span", { className: "formula-result", children: typeof formula.result === 'number' ? getMatterSymbol(formula.result) : '?' }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeFormula(index), className: "remove-formula-button", children: "\u00D7" })] }, index)))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "submit-section", children: [(0, jsx_runtime_1.jsx)("button", { onClick: submitPuzzle, disabled: submitting, className: "submit-button", children: submitting ? 'Creating...' : 'Create Puzzle' }), (0, jsx_runtime_1.jsx)("p", { className: "note", children: "Note: Creating a puzzle requires a small gas fee on Starknet." })] })] }));
};
exports.default = PuzzleCreator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,