c9a20fe189f7bb4204d2ab5ef4f4518d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
require("../styles/PuzzleSelector.css");
const MOCK_PUZZLES = [
    {
        id: 1,
        name: 'Demo Puzzle',
        creator: '0x12345678',
        difficulty: 1,
        initialState: '[[0,1],[1,0]]',
        formulas: ['A+B'],
    },
    {
        id: 2,
        name: 'Sample Puzzle',
        creator: '0x87654321',
        difficulty: 2,
        initialState: '[[1,0],[0,1]]',
        formulas: ['A-B'],
    },
];
const PuzzleSelector = ({ onSelectPuzzle }) => {
    const [puzzles, setPuzzles] = (0, react_1.useState)([]);
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [error, setError] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        // Try to fetch from backend, fallback to mock
        fetch('http://localhost:5000/puzzles')
            .then(res => {
            if (!res.ok)
                throw new Error('Backend error');
            return res.json();
        })
            .then(data => {
            const puzzlesData = data.puzzles || MOCK_PUZZLES;
            setPuzzles(puzzlesData);
            localStorage.setItem('puzzles', JSON.stringify(puzzlesData));
            setLoading(false);
        })
            .catch(() => {
            setPuzzles(MOCK_PUZZLES);
            localStorage.setItem('puzzles', JSON.stringify(MOCK_PUZZLES));
            setError('Backend unavailable, using mock puzzles.');
            setLoading(false);
        });
    }, []);
    const getDifficultyLabel = (level) => {
        switch (level) {
            case 1: return 'Easy';
            case 2: return 'Medium';
            case 3: return 'Hard';
            case 4: return 'Expert';
            default: return 'Unknown';
        }
    };
    if (loading) {
        return (0, jsx_runtime_1.jsx)("div", { className: "loading", "data-testid": "spinner", children: "Loading puzzles..." });
    }
    if (error) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "error-container", children: (0, jsx_runtime_1.jsx)("p", { className: "error-message", children: error }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "puzzle-selector", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Select a Puzzle" }), (0, jsx_runtime_1.jsx)("div", { className: "puzzles-grid", children: puzzles.map((puzzle) => ((0, jsx_runtime_1.jsxs)("div", { className: "puzzle-card", onClick: () => onSelectPuzzle(puzzle.id), children: [(0, jsx_runtime_1.jsxs)("h3", { children: ["#", puzzle.id, ": ", puzzle.name] }), (0, jsx_runtime_1.jsx)("div", { className: "puzzle-info", children: (0, jsx_runtime_1.jsx)("span", { className: `difficulty difficulty-${puzzle.difficulty}`, children: getDifficultyLabel(puzzle.difficulty) }) }), (0, jsx_runtime_1.jsxs)("div", { className: "puzzle-creator", children: ["Created by: ", puzzle.creator.substring(0, 8), "..."] })] }, puzzle.id))) }), puzzles.length === 0 && ((0, jsx_runtime_1.jsx)("div", { className: "no-puzzles", children: (0, jsx_runtime_1.jsx)("p", { children: "No puzzles found. Try again later or create your own!" }) }))] }));
};
exports.default = PuzzleSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3NheWFudGFucGFsMTAwL0Rlc2t0b3AvTXVtdS0tb25jaGFpbi1wdXp6bGUtZ2FtZS9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9QdXp6bGVTZWxlY3Rvci50c3giLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQW1EO0FBQ25ELHdDQUFzQztBQWV0QyxNQUFNLFlBQVksR0FBYTtJQUM3QjtRQUNFLEVBQUUsRUFBRSxDQUFDO1FBQ0wsSUFBSSxFQUFFLGFBQWE7UUFDbkIsT0FBTyxFQUFFLFlBQVk7UUFDckIsVUFBVSxFQUFFLENBQUM7UUFDYixZQUFZLEVBQUUsZUFBZTtRQUM3QixRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUM7S0FDbEI7SUFDRDtRQUNFLEVBQUUsRUFBRSxDQUFDO1FBQ0wsSUFBSSxFQUFFLGVBQWU7UUFDckIsT0FBTyxFQUFFLFlBQVk7UUFDckIsVUFBVSxFQUFFLENBQUM7UUFDYixZQUFZLEVBQUUsZUFBZTtRQUM3QixRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUM7S0FDbEI7Q0FDRixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQWtDLENBQUMsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFO0lBQzNFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFnQixJQUFJLENBQUMsQ0FBQztJQUV4RCxJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsOENBQThDO1FBQzlDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQzthQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUM5QyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLFlBQVksQ0FBQztZQUNqRCxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQzdELFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1YsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pCLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUM5RCxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUNyRCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDM0MsUUFBUSxLQUFLLEVBQUUsQ0FBQztZQUNkLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUM7WUFDdEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQztZQUN4QixLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDO1lBQ3RCLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUM7WUFDeEIsT0FBTyxDQUFDLENBQUMsT0FBTyxTQUFTLENBQUM7UUFDNUIsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVGLElBQUksT0FBTyxFQUFFLENBQUM7UUFDWixPQUFPLGdDQUFLLFNBQVMsRUFBQyxTQUFTLGlCQUFhLFNBQVMsbUNBQXlCLENBQUM7SUFDakYsQ0FBQztJQUVELElBQUksS0FBSyxFQUFFLENBQUM7UUFDVixPQUFPLENBQ0wsZ0NBQUssU0FBUyxFQUFDLGlCQUFpQixZQUM5Qiw4QkFBRyxTQUFTLEVBQUMsZUFBZSxZQUFFLEtBQUssR0FBSyxHQUNwQyxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUNMLGlDQUFLLFNBQVMsRUFBQyxpQkFBaUIsYUFDOUIsNkRBQXdCLEVBQ3hCLGdDQUFLLFNBQVMsRUFBQyxjQUFjLFlBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQ3ZCLGlDQUVFLFNBQVMsRUFBQyxhQUFhLEVBQ3ZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUV4QyxnREFBTSxNQUFNLENBQUMsRUFBRSxRQUFJLE1BQU0sQ0FBQyxJQUFJLElBQU0sRUFDcEMsZ0NBQUssU0FBUyxFQUFDLGFBQWEsWUFDMUIsaUNBQU0sU0FBUyxFQUFFLHlCQUF5QixNQUFNLENBQUMsVUFBVSxFQUFFLFlBQzFELGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FDakMsR0FDSCxFQUNOLGlDQUFLLFNBQVMsRUFBQyxnQkFBZ0IsNkJBQWMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFVLEtBVmhGLE1BQU0sQ0FBQyxFQUFFLENBV1YsQ0FDUCxDQUFDLEdBQ0UsRUFDTCxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUN2QixnQ0FBSyxTQUFTLEVBQUMsWUFBWSxZQUN6QixrR0FBNEQsR0FDeEQsQ0FDUCxJQUNHLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGtCQUFlLGNBQWMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvc2F5YW50YW5wYWwxMDAvRGVza3RvcC9NdW11LS1vbmNoYWluLXB1enpsZS1nYW1lL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL1B1enpsZVNlbGVjdG9yLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi4vc3R5bGVzL1B1enpsZVNlbGVjdG9yLmNzcyc7XG5cbmludGVyZmFjZSBQdXp6bGVTZWxlY3RvclByb3BzIHtcbiAgb25TZWxlY3RQdXp6bGU6IChwdXp6bGVJZDogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFB1enpsZSB7XG4gIGlkOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgY3JlYXRvcjogc3RyaW5nO1xuICBkaWZmaWN1bHR5OiBudW1iZXI7XG4gIGluaXRpYWxTdGF0ZTogc3RyaW5nO1xuICBmb3JtdWxhczogc3RyaW5nW107XG59XG5cbmNvbnN0IE1PQ0tfUFVaWkxFUzogUHV6emxlW10gPSBbXG4gIHtcbiAgICBpZDogMSxcbiAgICBuYW1lOiAnRGVtbyBQdXp6bGUnLFxuICAgIGNyZWF0b3I6ICcweDEyMzQ1Njc4JyxcbiAgICBkaWZmaWN1bHR5OiAxLFxuICAgIGluaXRpYWxTdGF0ZTogJ1tbMCwxXSxbMSwwXV0nLFxuICAgIGZvcm11bGFzOiBbJ0ErQiddLFxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAgbmFtZTogJ1NhbXBsZSBQdXp6bGUnLFxuICAgIGNyZWF0b3I6ICcweDg3NjU0MzIxJyxcbiAgICBkaWZmaWN1bHR5OiAyLFxuICAgIGluaXRpYWxTdGF0ZTogJ1tbMSwwXSxbMCwxXV0nLFxuICAgIGZvcm11bGFzOiBbJ0EtQiddLFxuICB9LFxuXTtcblxuY29uc3QgUHV6emxlU2VsZWN0b3I6IFJlYWN0LkZDPFB1enpsZVNlbGVjdG9yUHJvcHM+ID0gKHsgb25TZWxlY3RQdXp6bGUgfSkgPT4ge1xuICBjb25zdCBbcHV6emxlcywgc2V0UHV6emxlc10gPSB1c2VTdGF0ZTxQdXp6bGVbXT4oW10pO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFRyeSB0byBmZXRjaCBmcm9tIGJhY2tlbmQsIGZhbGxiYWNrIHRvIG1vY2tcbiAgICBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL3B1enpsZXMnKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcignQmFja2VuZCBlcnJvcicpO1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgY29uc3QgcHV6emxlc0RhdGEgPSBkYXRhLnB1enpsZXMgfHwgTU9DS19QVVpaTEVTO1xuICAgICAgICBzZXRQdXp6bGVzKHB1enpsZXNEYXRhKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3B1enpsZXMnLCBKU09OLnN0cmluZ2lmeShwdXp6bGVzRGF0YSkpO1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICBzZXRQdXp6bGVzKE1PQ0tfUFVaWkxFUyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwdXp6bGVzJywgSlNPTi5zdHJpbmdpZnkoTU9DS19QVVpaTEVTKSk7XG4gICAgICAgIHNldEVycm9yKCdCYWNrZW5kIHVuYXZhaWxhYmxlLCB1c2luZyBtb2NrIHB1enpsZXMuJyk7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBnZXREaWZmaWN1bHR5TGFiZWwgPSAobGV2ZWw6IG51bWJlcikgPT4ge1xuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuICdFYXN5JztcbiAgICAgIGNhc2UgMjogcmV0dXJuICdNZWRpdW0nO1xuICAgICAgY2FzZSAzOiByZXR1cm4gJ0hhcmQnO1xuICAgICAgY2FzZSA0OiByZXR1cm4gJ0V4cGVydCc7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJ1Vua25vd24nO1xuICAgIH1cbiAgfTtcblxuICBpZiAobG9hZGluZykge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImxvYWRpbmdcIiBkYXRhLXRlc3RpZD1cInNwaW5uZXJcIj5Mb2FkaW5nIHB1enpsZXMuLi48L2Rpdj47XG4gIH1cblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJlcnJvci1jb250YWluZXJcIj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXJyb3ItbWVzc2FnZVwiPntlcnJvcn08L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInB1enpsZS1zZWxlY3RvclwiPlxuICAgICAgPGgyPlNlbGVjdCBhIFB1enpsZTwvaDI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1enpsZXMtZ3JpZFwiPlxuICAgICAgICB7cHV6emxlcy5tYXAoKHB1enpsZSkgPT4gKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGtleT17cHV6emxlLmlkfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicHV6emxlLWNhcmRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25TZWxlY3RQdXp6bGUocHV6emxlLmlkKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDM+I3twdXp6bGUuaWR9OiB7cHV6emxlLm5hbWV9PC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHV6emxlLWluZm9cIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgZGlmZmljdWx0eSBkaWZmaWN1bHR5LSR7cHV6emxlLmRpZmZpY3VsdHl9YH0+XG4gICAgICAgICAgICAgICAge2dldERpZmZpY3VsdHlMYWJlbChwdXp6bGUuZGlmZmljdWx0eSl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdXp6bGUtY3JlYXRvclwiPkNyZWF0ZWQgYnk6IHtwdXp6bGUuY3JlYXRvci5zdWJzdHJpbmcoMCwgOCl9Li4uPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgICB7cHV6emxlcy5sZW5ndGggPT09IDAgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vLXB1enpsZXNcIj5cbiAgICAgICAgICA8cD5ObyBwdXp6bGVzIGZvdW5kLiBUcnkgYWdhaW4gbGF0ZXIgb3IgY3JlYXRlIHlvdXIgb3duITwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHV6emxlU2VsZWN0b3I7Il0sInZlcnNpb24iOjN9