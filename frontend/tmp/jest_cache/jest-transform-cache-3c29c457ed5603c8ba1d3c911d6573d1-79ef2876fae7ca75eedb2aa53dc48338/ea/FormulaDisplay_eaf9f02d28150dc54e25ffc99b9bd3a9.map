{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/components/FormulaDisplay.tsx","mappings":";;;AAAA,iCAA0B;AAC1B,kDAAyD,CAAC,8BAA8B;AACxF,wCAAsC;AAMtC,MAAM,cAAc,GAAkC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IACpE,4EAA4E;IAC5E,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAChC,OAAO,gCAAK,SAAS,EAAC,gCAAgC,YAAE,OAAO,GAAO,CAAC;IACzE,CAAC;IAED,MAAM,eAAe,GAAG,CAAC,IAAgB,EAAU,EAAE;QACnD,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,sBAAU,CAAC,KAAK;gBACnB,OAAO,IAAI,CAAC;YACd,KAAK,sBAAU,CAAC,KAAK;gBACnB,OAAO,IAAI,CAAC;YACd,KAAK,sBAAU,CAAC,IAAI;gBAClB,OAAO,IAAI,CAAC;YACd,KAAK,sBAAU,CAAC,GAAG;gBACjB,OAAO,GAAG,CAAC;YACb,KAAK,sBAAU,CAAC,IAAI;gBAClB,OAAO,GAAG,CAAC;YACb;gBACE,OAAO,GAAG,CAAC;QACf,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,SAAc,EAAE,EAAE;QACzC,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACjC,OAAO,iCAAM,SAAS,EAAC,eAAe,YAAE,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,GAAQ,CAAC;QAClF,CAAC;aAAM,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC9B,OAAO,CACL,iCAAK,SAAS,EAAC,eAAe,aAC3B,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,EAChC,iCAAM,SAAS,EAAC,UAAU,YAAE,SAAS,CAAC,QAAQ,GAAQ,EACrD,SAAS,CAAC,QAAQ,IAAI,CACrB,iCAAM,SAAS,EAAC,UAAU,YAAE,SAAS,CAAC,QAAQ,GAAQ,CACvD,EACA,SAAS,CAAC,KAAK,IAAI,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,IAChD,CACP,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,OAAO,CACL,iCAAK,SAAS,EAAC,iBAAiB,aAC9B,gCAAK,SAAS,EAAC,mBAAmB,YAC/B,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,GAC/B,EACN,gCAAK,SAAS,EAAC,eAAe,uBAAQ,EACtC,gCAAK,SAAS,EAAC,gBAAgB,YAC7B,iCAAM,SAAS,EAAC,eAAe,YAAE,eAAe,CAAC,OAAO,CAAC,MAAoB,CAAC,GAAQ,GAClF,IACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,cAAc,CAAC","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/components/FormulaDisplay.tsx"],"sourcesContent":["import React from 'react';\nimport { Formula, MatterType } from '../types/GameTypes'; // Ensure this path is correct\nimport '../styles/FormulaDisplay.css';\n\ninterface FormulaDisplayProps {\n  formula: Formula | string;\n}\n\nconst FormulaDisplay: React.FC<FormulaDisplayProps> = ({ formula }) => {\n  // DEV/TEST: If formula is a string (mock/test mode), just render it as text\n  if (typeof formula === 'string') {\n    return <div className=\"formula-display formula-string\">{formula}</div>;\n  }\n\n  const getMatterSymbol = (type: MatterType): string => {\n    switch (type) {\n      case MatterType.EARTH:\n        return 'ðŸŸ¤';\n      case MatterType.WATER:\n        return 'ðŸŸ¦';\n      case MatterType.FIRE:\n        return 'ðŸŸ¥';\n      case MatterType.AIR:\n        return 'â¬œ';\n      case MatterType.VOID:\n        return 'â¬›';\n      default:\n        return '?';\n    }\n  };\n\n  const renderCondition = (condition: any) => {\n    if (condition.type !== undefined) {\n      return <span className=\"matter-symbol\">{getMatterSymbol(condition.type)}</span>;\n    } else if (condition.operator) {\n      return (\n        <div className=\"formula-group\">\n          {renderCondition(condition.left)}\n          <span className=\"operator\">{condition.operator}</span>\n          {condition.quantity && (\n            <span className=\"quantity\">{condition.quantity}</span>\n          )}\n          {condition.right && renderCondition(condition.right)}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"formula-display\">\n      <div className=\"formula-condition\">\n        {renderCondition(formula.condition)}\n      </div>\n      <div className=\"formula-arrow\">â†’</div>\n      <div className=\"formula-result\">\n        <span className=\"matter-symbol\">{getMatterSymbol(formula.result as MatterType)}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default FormulaDisplay;"],"version":3}