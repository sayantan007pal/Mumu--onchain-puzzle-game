{"version":3,"names":["_react","require","_GameTypes","_formulaUtils","_gridUtils","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","_typeof","Symbol","toPrimitive","call","TypeError","String","Number","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","iterator","Array","from","isArray","_arrayLikeToArray","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","a","toString","slice","constructor","name","test","n","l","u","f","next","done","useGameState","exports","initialGrid","targetGrid","_useState","useState","grid","map","row","history","moves","_useState2","gameState","setGameState","setGrid","useCallback","newGrid","prevState","concat","applyMatterTransformation","position","formula","col","MatterType","VOID","adjacentCells","getAdjacentCells","shouldTransform","evaluateFormula","condition","result","waterToEarth","WATER","cell","FIRE","earthToAir","EARTH","includes","AETHER","fireToWater","every","airToAether","AIR","aetherToFire","undoLastMove","newHistory","pop","resetGrid","isSolved","j"],"sources":["useGameState.ts"],"sourcesContent":["// src/hooks/useGameState.ts\nimport { useState, useCallback } from 'react';\nimport { MatterType, GridPosition, Formula, GameState } from '../types/GameTypes';\nimport { evaluateFormula } from '../utils/formulaUtils';\nimport { getAdjacentCells } from '../utils/gridUtils';\n\nexport const useGameState = (initialGrid: MatterType[][], targetGrid?: MatterType[][]) => {\n  const [gameState, setGameState] = useState<GameState>({\n    grid: initialGrid.map(row => [...row]), // Deep copy\n    history: [initialGrid.map(row => [...row])], // Save initial state in history\n    moves: 0\n  });\n  \n  const setGrid = useCallback((newGrid: MatterType[][]) => {\n    setGameState(prevState => ({\n      ...prevState,\n      grid: newGrid,\n      history: [...prevState.history, newGrid],\n      moves: prevState.moves + 1\n    }));\n  }, []);\n  \n  const applyMatterTransformation = useCallback((position: GridPosition, formula: Formula | null) => {\n    const { row, col } = position;\n    const { grid } = gameState;\n    \n    // If the cell is empty (VOID), do nothing\n    if (grid[row][col] === MatterType.VOID) return;\n    \n    const newGrid = grid.map(row => [...row]); // Deep copy current grid\n    \n    // Get adjacent cells for formula evaluation\n    const adjacentCells = getAdjacentCells(grid, row, col);\n    \n    if (formula) {\n      // Apply specific formula if selected\n      const shouldTransform = evaluateFormula(\n        formula.condition, \n        grid[row][col], \n        adjacentCells\n      );\n      \n      if (shouldTransform) {\n        // For simplicity, assuming result is always a MatterType\n        newGrid[row][col] = formula.result as MatterType;\n        setGrid(newGrid);\n      }\n    } else {\n      // Auto-apply first applicable formula based on game rules\n      // Here we could implement game-specific rules from the project\n      const waterToEarth = grid[row][col] === MatterType.WATER && \n        adjacentCells.filter(cell => cell === MatterType.FIRE).length >= 2;\n      \n      const earthToAir = grid[row][col] === MatterType.EARTH && \n        adjacentCells.includes(MatterType.WATER) &&\n        adjacentCells.includes(MatterType.AETHER);\n      \n      const fireToWater = grid[row][col] === MatterType.FIRE &&\n        adjacentCells.every(cell => cell === MatterType.VOID);\n      \n      const airToAether = grid[row][col] === MatterType.AIR &&\n        adjacentCells.filter(cell => cell !== MatterType.VOID).length >= 3;\n      \n      const aetherToFire = grid[row][col] === MatterType.AETHER &&\n        adjacentCells.includes(MatterType.AIR);\n      \n      if (waterToEarth) {\n        newGrid[row][col] = MatterType.EARTH;\n        setGrid(newGrid);\n      } else if (earthToAir) {\n        newGrid[row][col] = MatterType.AIR;\n        setGrid(newGrid);\n      } else if (fireToWater) {\n        newGrid[row][col] = MatterType.WATER;\n        setGrid(newGrid);\n      } else if (airToAether) {\n        newGrid[row][col] = MatterType.AETHER;\n        setGrid(newGrid);\n      } else if (aetherToFire) {\n        newGrid[row][col] = MatterType.FIRE;\n        setGrid(newGrid);\n      }\n    }\n  }, [gameState, setGrid]);\n  \n  const undoLastMove = useCallback(() => {\n    setGameState(prevState => {\n      if (prevState.history.length <= 1) return prevState;\n      \n      const newHistory = [...prevState.history];\n      newHistory.pop(); // Remove current state\n      \n      return {\n        grid: newHistory[newHistory.length - 1].map(row => [...row]), // Deep copy last state\n        history: newHistory,\n        moves: prevState.moves - 1\n      };\n    });\n  }, []);\n  \n  const resetGrid = useCallback(() => {\n    setGameState({\n      grid: initialGrid.map(row => [...row]), // Deep copy initial grid\n      history: [initialGrid.map(row => [...row])], // Reset history with only initial state\n      moves: 0\n    });\n  }, [initialGrid]);\n  \n  // Check if puzzle is solved by comparing with target grid\n  const isSolved = useCallback(() => {\n    if (!targetGrid) return false;\n    \n    const { grid } = gameState;\n    \n    // Compare current grid with target grid\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] !== targetGrid[i][j]) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  }, [gameState, targetGrid]);\n  \n  return {\n    grid: gameState.grid,\n    moves: gameState.moves,\n    setGrid,\n    applyMatterTransformation,\n    undoLastMove,\n    resetGrid,\n    isSolved: isSolved()\n  };\n};\n"],"mappings":"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","ignoreList":[]}