aded720e254f685fbf993dc4d9eaa4f1
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
require("../styles/PuzzleSelector.css");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var MOCK_PUZZLES = [{
  id: 1,
  name: 'Demo Puzzle',
  creator: '0x12345678',
  difficulty: 1,
  initialState: '[[0,1],[1,0]]',
  formulas: ['A+B']
}, {
  id: 2,
  name: 'Sample Puzzle',
  creator: '0x87654321',
  difficulty: 2,
  initialState: '[[1,0],[0,1]]',
  formulas: ['A-B']
}];
var PuzzleSelector = function PuzzleSelector(_ref) {
  var onSelectPuzzle = _ref.onSelectPuzzle;
  var _useState = (0, _react.useState)([]),
    _useState2 = _slicedToArray(_useState, 2),
    puzzles = _useState2[0],
    setPuzzles = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = _slicedToArray(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = _slicedToArray(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  (0, _react.useEffect)(function () {
    // Try to fetch from backend, fallback to mock
    fetch('http://localhost:5000/puzzles').then(function (res) {
      if (!res.ok) throw new Error('Backend error');
      return res.json();
    }).then(function (data) {
      setPuzzles(data.puzzles || MOCK_PUZZLES);
      setLoading(false);
    })["catch"](function () {
      setPuzzles(MOCK_PUZZLES);
      setError('Backend unavailable, using mock puzzles.');
      setLoading(false);
    });
  }, []);
  var getDifficultyLabel = function getDifficultyLabel(level) {
    switch (level) {
      case 1:
        return 'Easy';
      case 2:
        return 'Medium';
      case 3:
        return 'Hard';
      case 4:
        return 'Expert';
      default:
        return 'Unknown';
    }
  };
  if (loading) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "loading"
    }, "Loading puzzles...");
  }
  if (error) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "error-container"
    }, /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, error));
  }
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "puzzle-selector"
  }, /*#__PURE__*/_react["default"].createElement("h2", null, "Select a Puzzle"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "puzzles-grid"
  }, puzzles.map(function (puzzle) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: puzzle.id,
      className: "puzzle-card",
      onClick: function onClick() {
        return onSelectPuzzle(puzzle.id);
      }
    }, /*#__PURE__*/_react["default"].createElement("h3", null, "#", puzzle.id, ": ", puzzle.name), /*#__PURE__*/_react["default"].createElement("div", {
      className: "puzzle-info"
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: "difficulty difficulty-".concat(puzzle.difficulty)
    }, getDifficultyLabel(puzzle.difficulty))), /*#__PURE__*/_react["default"].createElement("div", {
      className: "puzzle-creator"
    }, "Created by: ", puzzle.creator.substring(0, 8), "..."));
  })), puzzles.length === 0 && /*#__PURE__*/_react["default"].createElement("div", {
    className: "no-puzzles"
  }, /*#__PURE__*/_react["default"].createElement("p", null, "No puzzles found. Try again later or create your own!")));
};
var _default = exports["default"] = PuzzleSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,