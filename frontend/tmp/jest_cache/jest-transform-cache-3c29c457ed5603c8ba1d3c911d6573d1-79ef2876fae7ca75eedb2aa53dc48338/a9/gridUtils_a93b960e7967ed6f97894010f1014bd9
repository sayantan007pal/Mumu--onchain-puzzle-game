56f93cea79834cd3c9fb04dfebae0d71
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAdjacentCells = exports.countMatterType = exports.copyGrid = exports.areGridsEqual = void 0;
var _GameTypes = require("../types/GameTypes");
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; } // src/utils/gridUtils.ts
/**
 * Get adjacent cell matter types for a specific cell
 * @param grid The current game grid
 * @param row The row of the target cell
 * @param col The column of the target cell
 * @returns Array of adjacent matter types
 */
var getAdjacentCells = exports.getAdjacentCells = function getAdjacentCells(grid, row, col) {
  var adjacentCells = [];
  var directions = [[-1, 0],
  // Up
  [1, 0],
  // Down
  [0, -1],
  // Left
  [0, 1],
  // Right
  [-1, -1],
  // Up-Left
  [-1, 1],
  // Up-Right
  [1, -1],
  // Down-Left
  [1, 1] // Down-Right
  ];
  for (var _i = 0, _directions = directions; _i < _directions.length; _i++) {
    var _directions$_i = _slicedToArray(_directions[_i], 2),
      dx = _directions$_i[0],
      dy = _directions$_i[1];
    var newRow = row + dx;
    var newCol = col + dy;

    // Check if the adjacent cell is within bounds
    if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {
      adjacentCells.push(grid[newRow][newCol]);
    } else {
      // For cells outside the grid, consider them as VOID
      adjacentCells.push(_GameTypes.MatterType.VOID);
    }
  }
  return adjacentCells;
};

/**
 * Create a deep copy of a grid
 * @param grid The grid to copy
 * @returns A new grid with the same values
 */
var copyGrid = exports.copyGrid = function copyGrid(grid) {
  return grid.map(function (row) {
    return _toConsumableArray(row);
  });
};

/**
 * Check if two grids are equal
 * @param gridA First grid
 * @param gridB Second grid
 * @returns True if grids are equal, false otherwise
 */
var areGridsEqual = exports.areGridsEqual = function areGridsEqual(gridA, gridB) {
  if (gridA.length !== gridB.length || gridA[0].length !== gridB[0].length) {
    return false;
  }
  for (var i = 0; i < gridA.length; i++) {
    for (var j = 0; j < gridA[i].length; j++) {
      if (gridA[i][j] !== gridB[i][j]) {
        return false;
      }
    }
  }
  return true;
};

/**
 * Count the number of specific matter type in a grid
 * @param grid The game grid
 * @param type Matter type to count
 * @returns Count of the specified matter type
 */
var countMatterType = exports.countMatterType = function countMatterType(grid, type) {
  var count = 0;
  for (var i = 0; i < grid.length; i++) {
    for (var j = 0; j < grid[i].length; j++) {
      if (grid[i][j] === type) {
        count++;
      }
    }
  }
  return count;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,