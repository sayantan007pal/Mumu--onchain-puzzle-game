{"version":3,"names":["_GameTypes","require","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","Symbol","iterator","Array","from","isArray","_arrayLikeToArray","_slicedToArray","e","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","a","t","toString","call","slice","constructor","name","test","length","n","l","i","u","f","o","next","Object","done","push","value","getAdjacentCells","exports","grid","row","col","adjacentCells","directions","_i","_directions","_directions$_i","dx","dy","newRow","newCol","MatterType","VOID","copyGrid","map","areGridsEqual","gridA","gridB","j","countMatterType","type","count"],"sources":["gridUtils.ts"],"sourcesContent":["// src/utils/gridUtils.ts\nimport { MatterType } from '../types/GameTypes';\n\n/**\n * Get adjacent cell matter types for a specific cell\n * @param grid The current game grid\n * @param row The row of the target cell\n * @param col The column of the target cell\n * @returns Array of adjacent matter types\n */\nexport const getAdjacentCells = (grid: MatterType[][], row: number, col: number): MatterType[] => {\n  const adjacentCells: MatterType[] = [];\n  const directions = [\n    [-1, 0],  // Up\n    [1, 0],   // Down\n    [0, -1],  // Left\n    [0, 1],   // Right\n    [-1, -1], // Up-Left\n    [-1, 1],  // Up-Right\n    [1, -1],  // Down-Left\n    [1, 1]    // Down-Right\n  ];\n  \n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    \n    // Check if the adjacent cell is within bounds\n    if (\n      newRow >= 0 && \n      newRow < grid.length && \n      newCol >= 0 && \n      newCol < grid[0].length\n    ) {\n      adjacentCells.push(grid[newRow][newCol]);\n    } else {\n      // For cells outside the grid, consider them as VOID\n      adjacentCells.push(MatterType.VOID);\n    }\n  }\n  \n  return adjacentCells;\n};\n\n/**\n * Create a deep copy of a grid\n * @param grid The grid to copy\n * @returns A new grid with the same values\n */\nexport const copyGrid = (grid: MatterType[][]): MatterType[][] => {\n  return grid.map(row => [...row]);\n};\n\n/**\n * Check if two grids are equal\n * @param gridA First grid\n * @param gridB Second grid\n * @returns True if grids are equal, false otherwise\n */\nexport const areGridsEqual = (gridA: MatterType[][], gridB: MatterType[][]): boolean => {\n  if (gridA.length !== gridB.length || gridA[0].length !== gridB[0].length) {\n    return false;\n  }\n  \n  for (let i = 0; i < gridA.length; i++) {\n    for (let j = 0; j < gridA[i].length; j++) {\n      if (gridA[i][j] !== gridB[i][j]) {\n        return false;\n      }\n    }\n  }\n  \n  return true;\n};\n\n/**\n * Count the number of specific matter type in a grid\n * @param grid The game grid\n * @param type Matter type to count\n * @returns Count of the specified matter type\n */\nexport const countMatterType = (grid: MatterType[][], type: MatterType): number => {\n  let count = 0;\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === type) {\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n"],"mappings":";;;;;;AACA,IAAAA,UAAA,GAAAC,OAAA;AAAgD,SAAAC,mBAAAC,CAAA,WAAAC,kBAAA,CAAAD,CAAA,KAAAE,gBAAA,CAAAF,CAAA,KAAAG,2BAAA,CAAAH,CAAA,KAAAI,kBAAA;AAAA,SAAAA,mBAAA,cAAAC,SAAA;AAAA,SAAAH,iBAAAF,CAAA,8BAAAM,MAAA,YAAAN,CAAA,CAAAM,MAAA,CAAAC,QAAA,aAAAP,CAAA,uBAAAQ,KAAA,CAAAC,IAAA,CAAAT,CAAA;AAAA,SAAAC,mBAAAD,CAAA,QAAAQ,KAAA,CAAAE,OAAA,CAAAV,CAAA,UAAAW,iBAAA,CAAAX,CAAA;AAAA,SAAAY,eAAAZ,CAAA,EAAAa,CAAA,WAAAC,eAAA,CAAAd,CAAA,KAAAe,qBAAA,CAAAf,CAAA,EAAAa,CAAA,KAAAV,2BAAA,CAAAH,CAAA,EAAAa,CAAA,KAAAG,gBAAA;AAAA,SAAAA,iBAAA,cAAAX,SAAA;AAAA,SAAAF,4BAAAH,CAAA,EAAAiB,CAAA,QAAAjB,CAAA,2BAAAA,CAAA,SAAAW,iBAAA,CAAAX,CAAA,EAAAiB,CAAA,OAAAC,CAAA,MAAAC,QAAA,CAAAC,IAAA,CAAApB,CAAA,EAAAqB,KAAA,6BAAAH,CAAA,IAAAlB,CAAA,CAAAsB,WAAA,KAAAJ,CAAA,GAAAlB,CAAA,CAAAsB,WAAA,CAAAC,IAAA,aAAAL,CAAA,cAAAA,CAAA,GAAAV,KAAA,CAAAC,IAAA,CAAAT,CAAA,oBAAAkB,CAAA,+CAAAM,IAAA,CAAAN,CAAA,IAAAP,iBAAA,CAAAX,CAAA,EAAAiB,CAAA;AAAA,SAAAN,kBAAAX,CAAA,EAAAiB,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAjB,CAAA,CAAAyB,MAAA,MAAAR,CAAA,GAAAjB,CAAA,CAAAyB,MAAA,YAAAZ,CAAA,MAAAa,CAAA,GAAAlB,KAAA,CAAAS,CAAA,GAAAJ,CAAA,GAAAI,CAAA,EAAAJ,CAAA,IAAAa,CAAA,CAAAb,CAAA,IAAAb,CAAA,CAAAa,CAAA,UAAAa,CAAA;AAAA,SAAAX,sBAAAf,CAAA,EAAA2B,CAAA,QAAAT,CAAA,WAAAlB,CAAA,gCAAAM,MAAA,IAAAN,CAAA,CAAAM,MAAA,CAAAC,QAAA,KAAAP,CAAA,4BAAAkB,CAAA,QAAAL,CAAA,EAAAa,CAAA,EAAAE,CAAA,EAAAC,CAAA,EAAAZ,CAAA,OAAAa,CAAA,OAAAC,CAAA,iBAAAH,CAAA,IAAAV,CAAA,GAAAA,CAAA,CAAAE,IAAA,CAAApB,CAAA,GAAAgC,IAAA,QAAAL,CAAA,QAAAM,MAAA,CAAAf,CAAA,MAAAA,CAAA,UAAAY,CAAA,uBAAAA,CAAA,IAAAjB,CAAA,GAAAe,CAAA,CAAAR,IAAA,CAAAF,CAAA,GAAAgB,IAAA,MAAAjB,CAAA,CAAAkB,IAAA,CAAAtB,CAAA,CAAAuB,KAAA,GAAAnB,CAAA,CAAAQ,MAAA,KAAAE,CAAA,GAAAG,CAAA,iBAAA9B,CAAA,IAAA+B,CAAA,OAAAL,CAAA,GAAA1B,CAAA,yBAAA8B,CAAA,YAAAZ,CAAA,eAAAW,CAAA,GAAAX,CAAA,cAAAe,MAAA,CAAAJ,CAAA,MAAAA,CAAA,2BAAAE,CAAA,QAAAL,CAAA,aAAAT,CAAA;AAAA,SAAAH,gBAAAd,CAAA,QAAAQ,KAAA,CAAAE,OAAA,CAAAV,CAAA,UAAAA,CAAA,IADhD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMqC,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,GAAG,SAAnBA,gBAAgBA,CAAIE,IAAoB,EAAEC,GAAW,EAAEC,GAAW,EAAmB;EAChG,IAAMC,aAA2B,GAAG,EAAE;EACtC,IAAMC,UAAU,GAAG,CACjB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAAG;EACV,CAAC,CAAC,EAAE,CAAC,CAAC;EAAI;EACV,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAAG;EACV,CAAC,CAAC,EAAE,CAAC,CAAC;EAAI;EACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAAE;EACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAAG;EACV,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAAG;EACV,CAAC,CAAC,EAAE,CAAC,CAAC,CAAI;EAAA,CACX;EAED,SAAAC,EAAA,MAAAC,WAAA,GAAuBF,UAAU,EAAAC,EAAA,GAAAC,WAAA,CAAApB,MAAA,EAAAmB,EAAA,IAAE;IAA9B,IAAAE,cAAA,GAAAlC,cAAA,CAAAiC,WAAA,CAAAD,EAAA;MAAOG,EAAE,GAAAD,cAAA;MAAEE,EAAE,GAAAF,cAAA;IAChB,IAAMG,MAAM,GAAGT,GAAG,GAAGO,EAAE;IACvB,IAAMG,MAAM,GAAGT,GAAG,GAAGO,EAAE;;IAEvB;IACA,IACEC,MAAM,IAAI,CAAC,IACXA,MAAM,GAAGV,IAAI,CAACd,MAAM,IACpByB,MAAM,IAAI,CAAC,IACXA,MAAM,GAAGX,IAAI,CAAC,CAAC,CAAC,CAACd,MAAM,EACvB;MACAiB,aAAa,CAACP,IAAI,CAACI,IAAI,CAACU,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC;IAC1C,CAAC,MAAM;MACL;MACAR,aAAa,CAACP,IAAI,CAACgB,qBAAU,CAACC,IAAI,CAAC;IACrC;EACF;EAEA,OAAOV,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACO,IAAMW,QAAQ,GAAAf,OAAA,CAAAe,QAAA,GAAG,SAAXA,QAAQA,CAAId,IAAoB,EAAqB;EAChE,OAAOA,IAAI,CAACe,GAAG,CAAC,UAAAd,GAAG;IAAA,OAAAzC,kBAAA,CAAQyC,GAAG;EAAA,CAAC,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,IAAMe,aAAa,GAAAjB,OAAA,CAAAiB,aAAA,GAAG,SAAhBA,aAAaA,CAAIC,KAAqB,EAAEC,KAAqB,EAAc;EACtF,IAAID,KAAK,CAAC/B,MAAM,KAAKgC,KAAK,CAAChC,MAAM,IAAI+B,KAAK,CAAC,CAAC,CAAC,CAAC/B,MAAM,KAAKgC,KAAK,CAAC,CAAC,CAAC,CAAChC,MAAM,EAAE;IACxE,OAAO,KAAK;EACd;EAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4B,KAAK,CAAC/B,MAAM,EAAEG,CAAC,EAAE,EAAE;IACrC,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAC5B,CAAC,CAAC,CAACH,MAAM,EAAEiC,CAAC,EAAE,EAAE;MACxC,IAAIF,KAAK,CAAC5B,CAAC,CAAC,CAAC8B,CAAC,CAAC,KAAKD,KAAK,CAAC7B,CAAC,CAAC,CAAC8B,CAAC,CAAC,EAAE;QAC/B,OAAO,KAAK;MACd;IACF;EACF;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,eAAe,GAAArB,OAAA,CAAAqB,eAAA,GAAG,SAAlBA,eAAeA,CAAIpB,IAAoB,EAAEqB,IAAgB,EAAa;EACjF,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,IAAI,CAACd,MAAM,EAAEG,CAAC,EAAE,EAAE;IACpC,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,IAAI,CAACX,CAAC,CAAC,CAACH,MAAM,EAAEiC,CAAC,EAAE,EAAE;MACvC,IAAInB,IAAI,CAACX,CAAC,CAAC,CAAC8B,CAAC,CAAC,KAAKE,IAAI,EAAE;QACvBC,KAAK,EAAE;MACT;IACF;EACF;EAEA,OAAOA,KAAK;AACd,CAAC","ignoreList":[]}