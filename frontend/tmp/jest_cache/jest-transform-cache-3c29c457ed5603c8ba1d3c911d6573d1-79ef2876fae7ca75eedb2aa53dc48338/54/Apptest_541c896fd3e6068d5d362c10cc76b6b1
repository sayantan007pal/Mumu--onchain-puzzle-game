0f70a1eb96e8653752ed44b1b4024263
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _App = _interopRequireDefault(require("./App"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.asyncIterator || "@@asyncIterator", u = o.toStringTag || "@@toStringTag"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, ""); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, "_invoke", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error("Generator is already running"); if (4 === o) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = 3; var h = s(r, e, n); if ("normal" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } "throw" === h.type && (o = 4, n.method = "throw", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: "normal", arg: t.call(r, e) }; } catch (t) { return { type: "throw", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { ["next", "throw", "return"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if ("throw" !== c.type) { var h = c.arg, f = h.value; return f && "object" == _typeof(f) && n.call(f, "__await") ? r.resolve(f.__await).then(function (t) { e("next", t, a, u); }, function (t) { e("throw", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e("throw", t, a, u); }); } u(c.arg); } var o; c(this, "_invoke", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, "throw" === n && r.i["return"] && (e.method = "return", e.arg = t, d(r, e), "throw" === e.method) || "return" !== n && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a '" + n + "' method")), f; var i = s(o, r.i, e.arg); if ("throw" === i.type) return e.method = "throw", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, "return" !== e.method && (e.method = "next", e.arg = t), e.delegate = null, f) : a : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = "normal", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if ("function" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, "constructor", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, "GeneratorFunction"), r.isGeneratorFunction = function (t) { var r = "function" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || "GeneratorFunction" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, "GeneratorFunction")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, "Generator"), c(v, i, function () { return this; }), c(v, "toString", function () { return "[object Generator]"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = "throw", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n("end"), !1; if (!c && !h) throw Error("try statement without catch or finally"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = "next", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && ("break" === t || "continue" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = "next", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, "catch": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if ("throw" === n.type) { var o = n.arg; m(e); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, "next" === this.method && (this.arg = t), f; } }, r; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Mock fetch to always return a valid puzzle
beforeEach(function () {
  global.fetch = jest.fn(function () {
    return Promise.resolve(new Response(JSON.stringify({
      initial_grid: [[0, 1], [1, 0]],
      target_grid: [[1, 1], [1, 1]],
      formulas: ['A+B']
    }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json'
      }
    }));
  });
});
afterEach(function () {
  jest.resetAllMocks();
});
describe('App', function () {
  it('renders the main logo and footer', function () {
    (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_App["default"], null));
    // There may be multiple elements with "MuMu Game" (logo and footer)
    var titles = _react2.screen.getAllByText(/MuMu Game/i);
    expect(titles.length).toBeGreaterThan(0);
    expect(_react2.screen.getByText(/Built on Starknet/i)).toBeInTheDocument();
  });
  it('shows the GameBoard after loading puzzle', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_App["default"], null));
          // Wait for loading to disappear
          _context.next = 3;
          return (0, _react2.waitForElementToBeRemoved)(function () {
            return _react2.screen.getByText(/loading puzzle/i);
          });
        case 3:
          // Now check for the formula
          expect(_react2.screen.getByText(function (content) {
            return content.includes('A+B');
          })).toBeInTheDocument();
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('falls back to mock puzzle and shows GameBoard if backend fails', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          global.fetch.mockImplementationOnce(function () {
            return Promise.reject('fail');
          });
          (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_App["default"], null));
          // Wait for the GameBoard to appear (formula "A+B" from mock)
          _context2.next = 4;
          return (0, _react2.waitFor)(function () {
            expect(_react2.screen.getByText(function (content) {
              return content.includes('A+B');
            })).toBeInTheDocument();
          });
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfQXBwIiwiZSIsIl9fZXNNb2R1bGUiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiciIsInQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiU3ltYm9sIiwiaSIsIml0ZXJhdG9yIiwiYSIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJjIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImgiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJhcmciLCJkZWxlZ2F0ZSIsImQiLCJmIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJzIiwidHlwZSIsIkNvbnRleHQiLCJjYWxsIiwid3JhcCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJsIiwicCIsImdldFByb3RvdHlwZU9mIiwieSIsIngiLCJ2IiwiZyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJUeXBlRXJyb3IiLCJuZXh0IiwidyIsInRyeUVudHJpZXMiLCJwdXNoIiwibSIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJ1bnNoaWZ0IiwicG9wIiwidmFsdWVzIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJiZWZvcmVFYWNoIiwiZ2xvYmFsIiwiZmV0Y2giLCJqZXN0IiwiZm4iLCJSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbml0aWFsX2dyaWQiLCJ0YXJnZXRfZ3JpZCIsImZvcm11bGFzIiwic3RhdHVzIiwiaGVhZGVycyIsImFmdGVyRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsInRpdGxlcyIsInNjcmVlbiIsImdldEFsbEJ5VGV4dCIsImV4cGVjdCIsInRvQmVHcmVhdGVyVGhhbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwiX2NhbGxlZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJ3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkIiwiY29udGVudCIsImluY2x1ZGVzIiwiX2NhbGxlZTIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJtb2NrSW1wbGVtZW50YXRpb25PbmNlIiwicmVqZWN0Iiwid2FpdEZvciJdLCJzb3VyY2VzIjpbIkFwcC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIHdhaXRGb3IsIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuXG4vLyBNb2NrIGZldGNoIHRvIGFsd2F5cyByZXR1cm4gYSB2YWxpZCBwdXp6bGVcbmJlZm9yZUVhY2goKCkgPT4ge1xuICBnbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCgpID0+XG4gICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgbmV3IFJlc3BvbnNlKFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgaW5pdGlhbF9ncmlkOiBbWzAsIDFdLCBbMSwgMF1dLFxuICAgICAgICAgIHRhcmdldF9ncmlkOiBbWzEsIDFdLCBbMSwgMV1dLFxuICAgICAgICAgIGZvcm11bGFzOiBbJ0ErQiddLFxuICAgICAgICB9KSxcbiAgICAgICAgeyBzdGF0dXM6IDIwMCwgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0gfVxuICAgICAgKVxuICAgIClcbiAgKTtcbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbn0pO1xuXG5kZXNjcmliZSgnQXBwJywgKCkgPT4ge1xuICBpdCgncmVuZGVycyB0aGUgbWFpbiBsb2dvIGFuZCBmb290ZXInLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxBcHAgLz4pO1xuICAgIC8vIFRoZXJlIG1heSBiZSBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIFwiTXVNdSBHYW1lXCIgKGxvZ28gYW5kIGZvb3RlcilcbiAgICBjb25zdCB0aXRsZXMgPSBzY3JlZW4uZ2V0QWxsQnlUZXh0KC9NdU11IEdhbWUvaSk7XG4gICAgZXhwZWN0KHRpdGxlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvQnVpbHQgb24gU3RhcmtuZXQvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93cyB0aGUgR2FtZUJvYXJkIGFmdGVyIGxvYWRpbmcgcHV6emxlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8QXBwIC8+KTtcbiAgICAvLyBXYWl0IGZvciBsb2FkaW5nIHRvIGRpc2FwcGVhclxuICAgIGF3YWl0IHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQoKCkgPT4gc2NyZWVuLmdldEJ5VGV4dCgvbG9hZGluZyBwdXp6bGUvaSkpO1xuICAgIC8vIE5vdyBjaGVjayBmb3IgdGhlIGZvcm11bGFcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgoY29udGVudCkgPT4gY29udGVudC5pbmNsdWRlcygnQStCJykpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnZmFsbHMgYmFjayB0byBtb2NrIHB1enpsZSBhbmQgc2hvd3MgR2FtZUJvYXJkIGlmIGJhY2tlbmQgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgKGdsb2JhbC5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4gUHJvbWlzZS5yZWplY3QoJ2ZhaWwnKSk7XG4gICAgcmVuZGVyKDxBcHAgLz4pO1xuICAgIC8vIFdhaXQgZm9yIHRoZSBHYW1lQm9hcmQgdG8gYXBwZWFyIChmb3JtdWxhIFwiQStCXCIgZnJvbSBtb2NrKVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoKGNvbnRlbnQpID0+IGNvbnRlbnQuaW5jbHVkZXMoJ0ErQicpKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsSUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXdCLFNBQUFELHVCQUFBSSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxvQkFBQSxrQkFEeEIsbUtBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLENBQUEsU0FBQUMsQ0FBQSxFQUFBRCxDQUFBLE9BQUFILENBQUEsR0FBQUssTUFBQSxDQUFBQyxTQUFBLEVBQUFDLENBQUEsR0FBQVAsQ0FBQSxDQUFBUSxjQUFBLEVBQUFDLENBQUEsd0JBQUFDLE1BQUEsR0FBQUEsTUFBQSxPQUFBQyxDQUFBLEdB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