{"file":"/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/components/GameBoard.tsx","mappings":";;;AAAA,iCAAwC;AACxC,mDAA4C;AAC5C,qDAA8C;AAC9C,wDAAqD;AAErD,mCAAiC;AAUjC,MAAM,SAAS,GAA6B,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE;IACvG,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,yBAAyB,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,IAAA,2BAAY,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACrI,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,IAAA,gBAAQ,EAAkC,IAAI,CAAC,CAAC;IAC9F,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAElD,0CAA0C;IAC1C,MAAM,kBAAkB,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE;QAClD,IAAI,SAAS;YAAE,OAAO;QACtB,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC/B,CAAC;aAAM,CAAC;YACN,4BAA4B;YAC5B,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;gBACrD,+CAA+C;gBAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;gBAC1C,MAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAC3D,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBACrB,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjB,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;gBAC5B,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC3D,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnB,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC;YACD,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAAC,IAAI;QAAE,OAAO,gCAAK,SAAS,EAAC,OAAO,wCAA8B,CAAC;IAEvE,OAAO,CACL,iCAAK,SAAS,EAAC,sBAAsB,aACnC,iCAAK,SAAS,EAAC,WAAW,aACxB,uDAAa,QAAQ,IAAM,EAC3B,qDAAW,SAAS,IAAK,EACxB,SAAS,IAAI,gCAAK,SAAS,EAAC,kBAAkB,wCAAoB,IAC/D,EACN,iCAAK,SAAS,EAAC,iBAAiB,aAC9B,qEAAgC,EAC/B,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAChC,uBAAC,wBAAc,IAAa,OAAO,EAAE,OAAO,IAAvB,KAAK,CAAsB,CACjD,CAAC,IACE,EACN,gCACE,SAAS,EAAC,YAAY,gBACX,YAAY,EACvB,KAAK,EAAE;oBACL,mBAAmB,EAAE,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,SAAS;oBACtD,gBAAgB,EAAE,UAAU,IAAI,CAAC,MAAM,SAAS;iBACjD,YAEA,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CACnB,GAAG,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,CAC1B,uBAAC,uBAAa,IAEZ,IAAI,EAAE,WAAW,EACjB,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,CAAC,EACJ,UAAU,EAAE,eAAe,EAAE,CAAC,KAAK,CAAC,IAAI,eAAe,EAAE,CAAC,KAAK,CAAC,EAChE,OAAO,EAAE,GAAG,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC,IALlC,GAAG,CAAC,IAAI,CAAC,EAAE,CAMhB,CACH,CAAC,CACH,GACG,EACN,gCAAK,SAAS,EAAC,eAAe,YAC5B,mCACE,OAAO,EAAE,GAAG,EAAE;wBACZ,OAAO,CAAC,WAAW,CAAC,CAAC;wBACrB,YAAY,CAAC,CAAC,CAAC,CAAC;wBAChB,YAAY,CAAC,KAAK,CAAC,CAAC;wBACpB,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBAC3B,CAAC,EACD,SAAS,EAAC,cAAc,6BAGjB,GACL,IACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,SAAS,CAAC","names":[],"sources":["/Users/sayantanpal100/Desktop/Mumu--onchain-puzzle-game/frontend/src/components/GameBoard.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MatterElement from './MatterElement';\nimport FormulaDisplay from './FormulaDisplay';\nimport { useGameState } from '../hooks/useGameState';\nimport { MatterType, Direction, Formula } from '../types/GameTypes';\nimport '../styles/GameBoard.css';\n\ninterface GameBoardProps {\n  puzzleId: number;\n  initialGrid: MatterType[][];\n  targetGrid: MatterType[][];\n  formulas: Formula[];\n  onSolve: () => void;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({ puzzleId, initialGrid, targetGrid, formulas, onSolve }) => {\n  const { grid, moves, setGrid, applyMatterTransformation, undoLastMove, resetGrid, isSolved } = useGameState(initialGrid, targetGrid);\n  const [selectedElement, setSelectedElement] = useState<{ x: number, y: number } | null>(null);\n  const [moveCount, setMoveCount] = useState(0);\n  const [completed, setCompleted] = useState(false);\n\n  // Handle element click for local gameplay\n  const handleElementClick = (x: number, y: number) => {\n    if (completed) return;\n    if (!selectedElement) {\n      setSelectedElement({ x, y });\n    } else {\n      // Only allow adjacent moves\n      const dx = Math.abs(selectedElement.x - x);\n      const dy = Math.abs(selectedElement.y - y);\n      if ((dx === 1 && dy === 0) || (dx === 0 && dy === 1)) {\n        // Example: swap elements (customize as needed)\n        const newGrid = grid.map(row => [...row]);\n        const temp = newGrid[selectedElement.y][selectedElement.x];\n        newGrid[selectedElement.y][selectedElement.x] = newGrid[y][x];\n        newGrid[y][x] = temp;\n        setGrid(newGrid);\n        setMoveCount(moveCount + 1);\n        if (JSON.stringify(newGrid) === JSON.stringify(targetGrid)) {\n          setCompleted(true);\n          onSolve();\n        }\n      }\n      setSelectedElement(null);\n    }\n  };\n\n  if (!grid) return <div className=\"error\">No game state available</div>;\n\n  return (\n    <div className=\"game-board-container\">\n      <div className=\"game-info\">\n        <h2>Puzzle #{puzzleId}</h2>\n        <p>Moves: {moveCount}</p>\n        {completed && <div className=\"completed-banner\">Completed! ðŸŽ‰</div>}\n      </div>\n      <div className=\"formula-section\">\n        <h3>Transformation Formulas</h3>\n        {formulas.map((formula, index) => (\n          <FormulaDisplay key={index} formula={formula} />\n        ))}\n      </div>\n      <div\n        className=\"game-board\"\n        aria-label=\"Game Board\"\n        style={{\n          gridTemplateColumns: `repeat(${grid[0].length}, 60px)`,\n          gridTemplateRows: `repeat(${grid.length}, 60px)`\n        }}\n      >\n        {grid.map((row, y) =>\n          row.map((elementType, x) => (\n            <MatterElement\n              key={`${x}-${y}`}\n              type={elementType}\n              x={x}\n              y={y}\n              isSelected={selectedElement?.x === x && selectedElement?.y === y}\n              onClick={() => handleElementClick(x, y)}\n            />\n          ))\n        )}\n      </div>\n      <div className=\"game-controls\">\n        <button\n          onClick={() => {\n            setGrid(initialGrid);\n            setMoveCount(0);\n            setCompleted(false);\n            setSelectedElement(null);\n          }}\n          className=\"reset-button\"\n        >\n          Reset Puzzle\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoard;"],"version":3}