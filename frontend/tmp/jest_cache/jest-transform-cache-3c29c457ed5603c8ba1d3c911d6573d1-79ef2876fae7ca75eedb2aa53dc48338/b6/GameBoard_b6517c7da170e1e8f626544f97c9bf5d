be50556f0627604d1ce2e8e7526fe808
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const MatterElement_1 = require("./MatterElement");
const FormulaDisplay_1 = require("./FormulaDisplay");
const useGameState_1 = require("../hooks/useGameState");
require("../styles/GameBoard.css");
const GameBoard = ({ puzzleId, initialGrid, targetGrid, formulas, onSolve }) => {
    const { grid, moves, setGrid, applyMatterTransformation, undoLastMove, resetGrid, isSolved } = (0, useGameState_1.useGameState)(initialGrid, targetGrid);
    const [selectedElement, setSelectedElement] = (0, react_1.useState)(null);
    const [moveCount, setMoveCount] = (0, react_1.useState)(0);
    const [completed, setCompleted] = (0, react_1.useState)(false);
    // Handle element click for local gameplay
    const handleElementClick = (x, y) => {
        if (completed)
            return;
        if (!selectedElement) {
            setSelectedElement({ x, y });
        }
        else {
            // Only allow adjacent moves
            const dx = Math.abs(selectedElement.x - x);
            const dy = Math.abs(selectedElement.y - y);
            if ((dx === 1 && dy === 0) || (dx === 0 && dy === 1)) {
                // Example: swap elements (customize as needed)
                const newGrid = grid.map(row => [...row]);
                const temp = newGrid[selectedElement.y][selectedElement.x];
                newGrid[selectedElement.y][selectedElement.x] = newGrid[y][x];
                newGrid[y][x] = temp;
                setGrid(newGrid);
                setMoveCount(moveCount + 1);
                if (JSON.stringify(newGrid) === JSON.stringify(targetGrid)) {
                    setCompleted(true);
                    onSolve();
                }
            }
            setSelectedElement(null);
        }
    };
    if (!grid)
        return (0, jsx_runtime_1.jsx)("div", { className: "error", children: "No game state available" });
    return ((0, jsx_runtime_1.jsxs)("div", { className: "game-board-container", children: [(0, jsx_runtime_1.jsxs)("div", { className: "game-info", children: [(0, jsx_runtime_1.jsxs)("h2", { children: ["Puzzle #", puzzleId] }), (0, jsx_runtime_1.jsxs)("p", { children: ["Moves: ", moveCount] }), completed && (0, jsx_runtime_1.jsx)("div", { className: "completed-banner", children: "Completed! \uD83C\uDF89" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "formula-section", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Transformation Formulas" }), formulas.map((formula, index) => ((0, jsx_runtime_1.jsx)(FormulaDisplay_1.default, { formula: formula }, index)))] }), (0, jsx_runtime_1.jsx)("div", { className: "game-board", "aria-label": "Game Board", style: {
                    gridTemplateColumns: `repeat(${grid[0].length}, 60px)`,
                    gridTemplateRows: `repeat(${grid.length}, 60px)`
                }, children: grid.map((row, y) => row.map((elementType, x) => ((0, jsx_runtime_1.jsx)(MatterElement_1.default, { type: elementType, x: x, y: y, isSelected: selectedElement?.x === x && selectedElement?.y === y, onClick: () => handleElementClick(x, y) }, `${x}-${y}`)))) }), (0, jsx_runtime_1.jsx)("div", { className: "game-controls", children: (0, jsx_runtime_1.jsx)("button", { onClick: () => {
                        setGrid(initialGrid);
                        setMoveCount(0);
                        setCompleted(false);
                        setSelectedElement(null);
                    }, className: "reset-button", children: "Reset Puzzle" }) })] }));
};
exports.default = GameBoard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,