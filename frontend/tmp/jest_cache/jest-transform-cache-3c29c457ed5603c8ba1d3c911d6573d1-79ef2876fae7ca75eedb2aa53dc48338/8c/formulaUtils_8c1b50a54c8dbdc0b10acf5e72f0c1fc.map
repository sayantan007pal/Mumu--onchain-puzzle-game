{"version":3,"names":["_GameTypes","require","evaluateFormula","exports","condition","matterType","adjacentCells","type","undefined","operator","leftResult","left","rightResult","right","elemType","count","filter","cell","length","quantity","getMatterSymbol","MatterType","EARTH","WATER","FIRE","AIR","AETHER","STEAM","PLANT","VOID"],"sources":["formulaUtils.ts"],"sourcesContent":["// src/utils/formulaUtils.ts\nimport { MatterType, FormulaCondition, Formula } from '../types/GameTypes';\n\n/**\n * Evaluate a formula condition against a matter type and its adjacent cells\n * @param condition The formula condition to evaluate\n * @param matterType The current matter type\n * @param adjacentCells Array of adjacent matter types\n * @returns boolean indicating if the condition is satisfied\n */\nexport const evaluateFormula = (\n  condition: FormulaCondition, \n  matterType: MatterType, \n  adjacentCells: MatterType[]\n): boolean => {\n  // If condition has a direct type, check if it matches the matter type\n  if (condition.type !== undefined) {\n    return matterType === condition.type;\n  }\n  \n  // Handle operators\n  if (condition.operator === '+') {\n    // For addition, both left and right conditions must be satisfied\n    const leftResult = evaluateFormula(condition.left!, matterType, adjacentCells);\n    const rightResult = evaluateFormula(condition.right!, matterType, adjacentCells);\n    return leftResult && rightResult;\n  }\n  \n  if (condition.operator === '*') {\n    // For multiplication, check if the element appears the specified number of times\n    const elemType = condition.left!.type!;\n    const count = adjacentCells.filter(cell => cell === elemType).length;\n    return count === condition.quantity!;\n  }\n  \n  if (condition.operator === '>') {\n    // For greater than, check if the element appears more than the specified number of times\n    const elemType = condition.left!.type!;\n    const count = adjacentCells.filter(cell => cell === elemType).length;\n    return count > condition.quantity!;\n  }\n  \n  if (condition.operator === '<') {\n    // For less than, check if the element appears less than the specified number of times\n    const elemType = condition.left!.type!;\n    const count = adjacentCells.filter(cell => cell === elemType).length;\n    return count < condition.quantity!;\n  }\n  \n  return false;\n};\n\n/**\n * Gets the symbol for a given matter type\n * @param type MatterType enum value\n * @returns Symbol string (emoji)\n */\nexport const getMatterSymbol = (type: MatterType): string => {\n  switch (type) {\n    case MatterType.EARTH: return 'üü§';\n    case MatterType.WATER: return 'üü¶';\n    case MatterType.FIRE: return 'üî•';\n    case MatterType.AIR: return 'üí®';\n    case MatterType.AETHER: return 'üü£';\n    case MatterType.STEAM: return 'üí≠';\n    case MatterType.PLANT: return 'üå±';\n    case MatterType.VOID: return '‚¨õ';\n    default: return '‚ùì';\n  }\n};\n"],"mappings":";;;;;;AACA,IAAAA,UAAA,GAAAC,OAAA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,gBAAe,GAAAC,OAAA,CAAAD,eAAA,GAAG,SAAlBA,eAAeA,CAC1BE,SAA2B,EAC3BC,UAAsB,EACtBC,aAA2B,EACf;EACZ;EACA,IAAIF,SAAS,CAACG,IAAI,KAAKC,SAAS,EAAE;IAChC,OAAOH,UAAU,KAAKD,SAAS,CAACG,IAAI;EACtC;;EAEA;EACA,IAAIH,SAAS,CAACK,QAAQ,KAAK,GAAG,EAAE;IAC9B;IACA,IAAMC,UAAU,GAAGR,gBAAe,CAACE,SAAS,CAACO,IAAI,EAAGN,UAAU,EAAEC,aAAa,CAAC;IAC9E,IAAMM,WAAW,GAAGV,gBAAe,CAACE,SAAS,CAACS,KAAK,EAAGR,UAAU,EAAEC,aAAa,CAAC;IAChF,OAAOI,UAAU,IAAIE,WAAW;EAClC;EAEA,IAAIR,SAAS,CAACK,QAAQ,KAAK,GAAG,EAAE;IAC9B;IACA,IAAMK,QAAQ,GAAGV,SAAS,CAACO,IAAI,CAAEJ,IAAK;IACtC,IAAMQ,KAAK,GAAGT,aAAa,CAACU,MAAM,CAAC,UAAAC,IAAI;MAAA,OAAIA,IAAI,KAAKH,QAAQ;IAAA,EAAC,CAACI,MAAM;IACpE,OAAOH,KAAK,KAAKX,SAAS,CAACe,QAAS;EACtC;EAEA,IAAIf,SAAS,CAACK,QAAQ,KAAK,GAAG,EAAE;IAC9B;IACA,IAAMK,SAAQ,GAAGV,SAAS,CAACO,IAAI,CAAEJ,IAAK;IACtC,IAAMQ,MAAK,GAAGT,aAAa,CAACU,MAAM,CAAC,UAAAC,IAAI;MAAA,OAAIA,IAAI,KAAKH,SAAQ;IAAA,EAAC,CAACI,MAAM;IACpE,OAAOH,MAAK,GAAGX,SAAS,CAACe,QAAS;EACpC;EAEA,IAAIf,SAAS,CAACK,QAAQ,KAAK,GAAG,EAAE;IAC9B;IACA,IAAMK,UAAQ,GAAGV,SAAS,CAACO,IAAI,CAAEJ,IAAK;IACtC,IAAMQ,OAAK,GAAGT,aAAa,CAACU,MAAM,CAAC,UAAAC,IAAI;MAAA,OAAIA,IAAI,KAAKH,UAAQ;IAAA,EAAC,CAACI,MAAM;IACpE,OAAOH,OAAK,GAAGX,SAAS,CAACe,QAAS;EACpC;EAEA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACO,IAAMC,eAAe,GAAAjB,OAAA,CAAAiB,eAAA,GAAG,SAAlBA,eAAeA,CAAIb,IAAgB,EAAa;EAC3D,QAAQA,IAAI;IACV,KAAKc,qBAAU,CAACC,KAAK;MAAE,OAAO,IAAI;IAClC,KAAKD,qBAAU,CAACE,KAAK;MAAE,OAAO,IAAI;IAClC,KAAKF,qBAAU,CAACG,IAAI;MAAE,OAAO,IAAI;IACjC,KAAKH,qBAAU,CAACI,GAAG;MAAE,OAAO,IAAI;IAChC,KAAKJ,qBAAU,CAACK,MAAM;MAAE,OAAO,IAAI;IACnC,KAAKL,qBAAU,CAACM,KAAK;MAAE,OAAO,IAAI;IAClC,KAAKN,qBAAU,CAACO,KAAK;MAAE,OAAO,IAAI;IAClC,KAAKP,qBAAU,CAACQ,IAAI;MAAE,OAAO,GAAG;IAChC;MAAS,OAAO,GAAG;EACrB;AACF,CAAC","ignoreList":[]}